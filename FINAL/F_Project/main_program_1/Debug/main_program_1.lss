
main_program_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000132  00800060  00002a90  00002b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800192  00800192  00002c56  2**0
                  ALLOC
  3 .stab         00002934  00000000  00000000  00002c58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001230  00000000  00000000  0000558c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000067bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000068fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000086b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000095a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a350  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a73d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000af0b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 bc 12 	jmp	0x2578	; 0x2578 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 08 	call	0x113c	; 0x113c <main>
      8a:	0c 94 46 15 	jmp	0x2a8c	; 0x2a8c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e7       	ldi	r26, 0x76	; 118
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 e7       	ldi	r24, 0x76	; 118
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <_TIMER0_CALLBACK>:
/*
 * Description :
 * Call-back function that is called to be done when the timer interrupt occurs
 */
void _TIMER0_CALLBACK(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* incrementing the number of ticks whenever the timer interrupt happens */
	g_tick++;
     b4e:	80 91 92 01 	lds	r24, 0x0192
     b52:	90 91 93 01 	lds	r25, 0x0193
     b56:	a0 91 94 01 	lds	r26, 0x0194
     b5a:	b0 91 95 01 	lds	r27, 0x0195
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	a1 1d       	adc	r26, r1
     b62:	b1 1d       	adc	r27, r1
     b64:	80 93 92 01 	sts	0x0192, r24
     b68:	90 93 93 01 	sts	0x0193, r25
     b6c:	a0 93 94 01 	sts	0x0194, r26
     b70:	b0 93 95 01 	sts	0x0195, r27
}
     b74:	cf 91       	pop	r28
     b76:	df 91       	pop	r29
     b78:	08 95       	ret

00000b7a <_delay_second>:
/*
 * Description :
 * Delay Function that works to make specific delays based on the user choice
 */
void _delay_second(uint8 seconds)
{
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	0f 92       	push	r0
     b80:	cd b7       	in	r28, 0x3d	; 61
     b82:	de b7       	in	r29, 0x3e	; 62
     b84:	89 83       	std	Y+1, r24	; 0x01
	/*Setting up the configuration object for the timer */
	TIMER0_config.clock = F_CPU_8;
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	80 93 9a 01 	sts	0x019A, r24
	TIMER0_config.compare_value = 0;
     b8c:	10 92 9f 01 	sts	0x019F, r1
     b90:	10 92 9e 01 	sts	0x019E, r1
	TIMER0_config.initial_value = 0;
     b94:	10 92 9d 01 	sts	0x019D, r1
     b98:	10 92 9c 01 	sts	0x019C, r1
	TIMER0_config.mode = NORMAL;
     b9c:	10 92 9b 01 	sts	0x019B, r1

	/* Setting up & initializing the timer before starting up */
	 Timer0_setCallBack(_TIMER0_CALLBACK);
     ba0:	83 ea       	ldi	r24, 0xA3	; 163
     ba2:	95 e0       	ldi	r25, 0x05	; 5
     ba4:	0e 94 45 13 	call	0x268a	; 0x268a <Timer0_setCallBack>
	 Timer0_Init(&TIMER0_config);
     ba8:	8a e9       	ldi	r24, 0x9A	; 154
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	0e 94 ef 12 	call	0x25de	; 0x25de <Timer0_Init>

	 /* while loop to hold on the processor until the required delay time occures */
	 while (g_tick <(seconds * NUMBER_OF_OVERFLOWS_PER_SECOND));
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	84 ef       	ldi	r24, 0xF4	; 244
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	ac 01       	movw	r20, r24
     bbc:	24 9f       	mul	r18, r20
     bbe:	c0 01       	movw	r24, r0
     bc0:	25 9f       	mul	r18, r21
     bc2:	90 0d       	add	r25, r0
     bc4:	34 9f       	mul	r19, r20
     bc6:	90 0d       	add	r25, r0
     bc8:	11 24       	eor	r1, r1
     bca:	9c 01       	movw	r18, r24
     bcc:	44 27       	eor	r20, r20
     bce:	37 fd       	sbrc	r19, 7
     bd0:	40 95       	com	r20
     bd2:	54 2f       	mov	r21, r20
     bd4:	80 91 92 01 	lds	r24, 0x0192
     bd8:	90 91 93 01 	lds	r25, 0x0193
     bdc:	a0 91 94 01 	lds	r26, 0x0194
     be0:	b0 91 95 01 	lds	r27, 0x0195
     be4:	82 17       	cp	r24, r18
     be6:	93 07       	cpc	r25, r19
     be8:	a4 07       	cpc	r26, r20
     bea:	b5 07       	cpc	r27, r21
     bec:	08 f3       	brcs	.-62     	; 0xbb0 <_delay_second+0x36>
	 g_tick=0;
     bee:	10 92 92 01 	sts	0x0192, r1
     bf2:	10 92 93 01 	sts	0x0193, r1
     bf6:	10 92 94 01 	sts	0x0194, r1
     bfa:	10 92 95 01 	sts	0x0195, r1

	 /* Closing the timer after using it */
	 Timer_DeInit();
     bfe:	0e 94 57 13 	call	0x26ae	; 0x26ae <Timer_DeInit>
}
     c02:	0f 90       	pop	r0
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <_delay_milli_second>:
/*
 * Description :
 * Delay Function that works to make specific delays based on the user choice
 */
void _delay_milli_second(uint32 m_seconds)
{
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <_delay_milli_second+0x6>
     c10:	00 d0       	rcall	.+0      	; 0xc12 <_delay_milli_second+0x8>
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	69 83       	std	Y+1, r22	; 0x01
     c18:	7a 83       	std	Y+2, r23	; 0x02
     c1a:	8b 83       	std	Y+3, r24	; 0x03
     c1c:	9c 83       	std	Y+4, r25	; 0x04
	/*Setting up the configuration object for the timer */
	TIMER0_config.clock = F_CPU_8;
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	80 93 9a 01 	sts	0x019A, r24
	TIMER0_config.compare_value = 0;
     c24:	10 92 9f 01 	sts	0x019F, r1
     c28:	10 92 9e 01 	sts	0x019E, r1
	TIMER0_config.initial_value = 0;
     c2c:	10 92 9d 01 	sts	0x019D, r1
     c30:	10 92 9c 01 	sts	0x019C, r1
	TIMER0_config.mode = NORMAL;
     c34:	10 92 9b 01 	sts	0x019B, r1

	/* Setting up & initializing the timer before starting up */
	 Timer0_setCallBack(_TIMER0_CALLBACK);
     c38:	83 ea       	ldi	r24, 0xA3	; 163
     c3a:	95 e0       	ldi	r25, 0x05	; 5
     c3c:	0e 94 45 13 	call	0x268a	; 0x268a <Timer0_setCallBack>
	 Timer0_Init(&TIMER0_config);
     c40:	8a e9       	ldi	r24, 0x9A	; 154
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	0e 94 ef 12 	call	0x25de	; 0x25de <Timer0_Init>

	 /* while loop to hold on the processor until the required delay time occurs */
	 while (g_tick <(m_seconds * NUMBER_OF_OVERFLOWS_PER_MILLI_SECOND));
     c48:	29 81       	ldd	r18, Y+1	; 0x01
     c4a:	3a 81       	ldd	r19, Y+2	; 0x02
     c4c:	4b 81       	ldd	r20, Y+3	; 0x03
     c4e:	5c 81       	ldd	r21, Y+4	; 0x04
     c50:	da 01       	movw	r26, r20
     c52:	c9 01       	movw	r24, r18
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	aa 1f       	adc	r26, r26
     c5a:	bb 1f       	adc	r27, r27
     c5c:	88 0f       	add	r24, r24
     c5e:	99 1f       	adc	r25, r25
     c60:	aa 1f       	adc	r26, r26
     c62:	bb 1f       	adc	r27, r27
     c64:	28 0f       	add	r18, r24
     c66:	39 1f       	adc	r19, r25
     c68:	4a 1f       	adc	r20, r26
     c6a:	5b 1f       	adc	r21, r27
     c6c:	80 91 92 01 	lds	r24, 0x0192
     c70:	90 91 93 01 	lds	r25, 0x0193
     c74:	a0 91 94 01 	lds	r26, 0x0194
     c78:	b0 91 95 01 	lds	r27, 0x0195
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	08 f3       	brcs	.-62     	; 0xc48 <_delay_milli_second+0x3e>
	 g_tick=0;
     c86:	10 92 92 01 	sts	0x0192, r1
     c8a:	10 92 93 01 	sts	0x0193, r1
     c8e:	10 92 94 01 	sts	0x0194, r1
     c92:	10 92 95 01 	sts	0x0195, r1

	 /* Closing the timer after using it */
	 Timer_DeInit();
     c96:	0e 94 57 13 	call	0x26ae	; 0x26ae <Timer_DeInit>
}
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	0f 90       	pop	r0
     ca2:	cf 91       	pop	r28
     ca4:	df 91       	pop	r29
     ca6:	08 95       	ret

00000ca8 <Read_Password>:
 * 3. if the password has been entered wrong for 3 times in row, the buzzer is fired & changes
 *    error_check variable to one
 */

void Read_Password(void)
{
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	df 93       	push	r29
     cae:	cf 93       	push	r28
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <Read_Password+0xa>
     cb2:	0f 92       	push	r0
     cb4:	cd b7       	in	r28, 0x3d	; 61
     cb6:	de b7       	in	r29, 0x3e	; 62

	/* declaring a variable for password state */
	uint8 password_State;

	/* declaring a variable for error numbers */
	uint8 error_count = 0;
     cb8:	19 82       	std	Y+1, r1	; 0x01

	/* Initializing the two password arrays before taking inputs from user */
	strcpy(password_arr,"p1");
     cba:	8e e7       	ldi	r24, 0x7E	; 126
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	20 e6       	ldi	r18, 0x60	; 96
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	b9 01       	movw	r22, r18
     cc4:	43 e0       	ldi	r20, 0x03	; 3
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	0e 94 ef 14 	call	0x29de	; 0x29de <memcpy>
	strcpy(password_confirm_arr,"p2");
     ccc:	88 e8       	ldi	r24, 0x88	; 136
     cce:	91 e0       	ldi	r25, 0x01	; 1
     cd0:	23 e6       	ldi	r18, 0x63	; 99
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	b9 01       	movw	r22, r18
     cd6:	43 e0       	ldi	r20, 0x03	; 3
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	0e 94 ef 14 	call	0x29de	; 0x29de <memcpy>

	LCD_clearScreen();
     cde:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>
     ce2:	ef c0       	rjmp	.+478    	; 0xec2 <Read_Password+0x21a>

		while(strcmp(password_arr,password_confirm_arr) != 0)
		{

			/* checks if this is the first time the program enters this loop or not */
			if(confirm_check != 0)
     ce4:	80 91 96 01 	lds	r24, 0x0196
     ce8:	88 23       	and	r24, r24
     cea:	09 f1       	breq	.+66     	; 0xd2e <Read_Password+0x86>
			{
				LCD_displayStringRowColumn(0,0,"Password not");
     cec:	26 e6       	ldi	r18, 0x66	; 102
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	a9 01       	movw	r20, r18
     cf6:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"Confirmed");
     cfa:	23 e7       	ldi	r18, 0x73	; 115
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	a9 01       	movw	r20, r18
     d04:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2,0,"Please re-enter");
     d08:	2d e7       	ldi	r18, 0x7D	; 125
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	a9 01       	movw	r20, r18
     d12:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(3,0,"your password !");
     d16:	2d e8       	ldi	r18, 0x8D	; 141
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	83 e0       	ldi	r24, 0x03	; 3
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	a9 01       	movw	r20, r18
     d20:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>

				/* delay for 5 seconds until the user reads the message */
				_delay_second(5);
     d24:	85 e0       	ldi	r24, 0x05	; 5
     d26:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_delay_second>

				LCD_clearScreen();
     d2a:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>
			}

			/*Takes the password from the user and send it to MC2 */
			LCD_displayStringRowColumn(1,0,"Enter Your");
     d2e:	2d e9       	ldi	r18, 0x9D	; 157
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	a9 01       	movw	r20, r18
     d38:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(2,0,"Password !");
     d3c:	28 ea       	ldi	r18, 0xA8	; 168
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	a9 01       	movw	r20, r18
     d46:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
			LCD_moveCursor(3,6);
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	66 e0       	ldi	r22, 0x06	; 6
     d4e:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_moveCursor>

			/* A Loop to take the input password from the user */
			for(i=0; i<5; i++)
     d52:	1b 82       	std	Y+3, r1	; 0x03
     d54:	15 c0       	rjmp	.+42     	; 0xd80 <Read_Password+0xd8>
			{
				password_arr[i] =  KEYPAD_getPressedKey();
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	08 2f       	mov	r16, r24
     d5a:	10 e0       	ldi	r17, 0x00	; 0
     d5c:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <KEYPAD_getPressedKey>
     d60:	f8 01       	movw	r30, r16
     d62:	e2 58       	subi	r30, 0x82	; 130
     d64:	fe 4f       	sbci	r31, 0xFE	; 254
     d66:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
     d68:	8a e2       	ldi	r24, 0x2A	; 42
     d6a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_displayCharacter>

				/* delay for 500 milli second until the button is released */
				_delay_milli_second(50);
     d6e:	62 e3       	ldi	r22, 0x32	; 50
     d70:	70 e0       	ldi	r23, 0x00	; 0
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	0e 94 05 06 	call	0xc0a	; 0xc0a <_delay_milli_second>
			LCD_displayStringRowColumn(1,0,"Enter Your");
			LCD_displayStringRowColumn(2,0,"Password !");
			LCD_moveCursor(3,6);

			/* A Loop to take the input password from the user */
			for(i=0; i<5; i++)
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	8f 5f       	subi	r24, 0xFF	; 255
     d7e:	8b 83       	std	Y+3, r24	; 0x03
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	85 30       	cpi	r24, 0x05	; 5
     d84:	40 f3       	brcs	.-48     	; 0xd56 <Read_Password+0xae>

				/* delay for 500 milli second until the button is released */
				_delay_milli_second(50);
			}
			/* Inserting '#' at the end of the password so that the MC2 Stops on reading it */
			password_arr[5] = '#';
     d86:	83 e2       	ldi	r24, 0x23	; 35
     d88:	80 93 83 01 	sts	0x0183, r24
			/* Inserting the null '\0' at the end of the password so that the MC1
		       stops on sending it */
			password_arr[6] = '\0';
     d8c:	10 92 84 01 	sts	0x0184, r1

			LCD_clearScreen();
     d90:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>

			/*confirming the password entered from the user*/
			LCD_displayStringRowColumn(1,0,"Please Confirm");
     d94:	23 eb       	ldi	r18, 0xB3	; 179
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	a9 01       	movw	r20, r18
     d9e:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(2,0,"your password !");
     da2:	2d e8       	ldi	r18, 0x8D	; 141
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	a9 01       	movw	r20, r18
     dac:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
			LCD_moveCursor(3,6);
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	66 e0       	ldi	r22, 0x06	; 6
     db4:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_moveCursor>

			/* A Loop to take the input password from the user */
			for(i=0; i<5; i++)
     db8:	1b 82       	std	Y+3, r1	; 0x03
     dba:	15 c0       	rjmp	.+42     	; 0xde6 <Read_Password+0x13e>
			{
				password_confirm_arr[i] =  KEYPAD_getPressedKey();
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	08 2f       	mov	r16, r24
     dc0:	10 e0       	ldi	r17, 0x00	; 0
     dc2:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <KEYPAD_getPressedKey>
     dc6:	f8 01       	movw	r30, r16
     dc8:	e8 57       	subi	r30, 0x78	; 120
     dca:	fe 4f       	sbci	r31, 0xFE	; 254
     dcc:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
     dce:	8a e2       	ldi	r24, 0x2A	; 42
     dd0:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_displayCharacter>


				/* delay for 500 milli second until the button is released */
				_delay_milli_second(50);
     dd4:	62 e3       	ldi	r22, 0x32	; 50
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 05 06 	call	0xc0a	; 0xc0a <_delay_milli_second>
			LCD_displayStringRowColumn(1,0,"Please Confirm");
			LCD_displayStringRowColumn(2,0,"your password !");
			LCD_moveCursor(3,6);

			/* A Loop to take the input password from the user */
			for(i=0; i<5; i++)
     de0:	8b 81       	ldd	r24, Y+3	; 0x03
     de2:	8f 5f       	subi	r24, 0xFF	; 255
     de4:	8b 83       	std	Y+3, r24	; 0x03
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	85 30       	cpi	r24, 0x05	; 5
     dea:	40 f3       	brcs	.-48     	; 0xdbc <Read_Password+0x114>

				/* delay for 500 milli second until the button is released */
				_delay_milli_second(50);
			}
			/* Inserting '#' at the end of the password so that the MC2 Stops on reading it */
			password_confirm_arr[5] = '#';
     dec:	83 e2       	ldi	r24, 0x23	; 35
     dee:	80 93 8d 01 	sts	0x018D, r24
			/* Inserting the null '\0' at the end of the password so that the MC1
		       stops on sending it */
			password_confirm_arr[6] = '\0';
     df2:	10 92 8e 01 	sts	0x018E, r1

			LCD_clearScreen();
     df6:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>

			/* changing the value of the confirm_check variable to recognize that the loop has
			   been entered  */
			confirm_check = 1;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	80 93 96 01 	sts	0x0196, r24

	/* While loop to confirm that the input password is correctly taken from the user */
	while(error_count < 3)
	{

		while(strcmp(password_arr,password_confirm_arr) != 0)
     e00:	8e e7       	ldi	r24, 0x7E	; 126
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	28 e8       	ldi	r18, 0x88	; 136
     e06:	31 e0       	ldi	r19, 0x01	; 1
     e08:	b9 01       	movw	r22, r18
     e0a:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <strcmp>
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	09 f0       	breq	.+2      	; 0xe14 <Read_Password+0x16c>
     e12:	68 cf       	rjmp	.-304    	; 0xce4 <Read_Password+0x3c>
			   been entered  */
			confirm_check = 1;
		}

		/* re-set the value of confirm_check variable */
		confirm_check = 0;
     e14:	10 92 96 01 	sts	0x0196, r1

		/* Wait until MC2 is ready*/
		while(UART_recieveByte() != MC2_READY){}
     e18:	0e 94 1b 14 	call	0x2836	; 0x2836 <UART_recieveByte>
     e1c:	80 31       	cpi	r24, 0x10	; 16
     e1e:	e1 f7       	brne	.-8      	; 0xe18 <Read_Password+0x170>

		/*Request for password check */
		UART_sendByte(CHECK_PASSWORD);
     e20:	86 e0       	ldi	r24, 0x06	; 6
     e22:	0e 94 04 14 	call	0x2808	; 0x2808 <UART_sendByte>

		/* Wait until MC2 is ready*/
		while(UART_recieveByte() != MC2_READY){}
     e26:	0e 94 1b 14 	call	0x2836	; 0x2836 <UART_recieveByte>
     e2a:	80 31       	cpi	r24, 0x10	; 16
     e2c:	e1 f7       	brne	.-8      	; 0xe26 <Read_Password+0x17e>

		/*sending the confirmed password for MC2 */
		UART_sendString(password_arr);
     e2e:	8e e7       	ldi	r24, 0x7E	; 126
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	0e 94 2a 14 	call	0x2854	; 0x2854 <UART_sendString>

		LCD_displayStringRowColumn(0,3,"PROCESSING");
     e36:	22 ec       	ldi	r18, 0xC2	; 194
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	63 e0       	ldi	r22, 0x03	; 3
     e3e:	a9 01       	movw	r20, r18
     e40:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>

		/* wait 2 seconds until MC2 checks on the password */
		_delay_second(2);
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_delay_second>
		LCD_clearScreen();
     e4a:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>

		/* Checks about the condition of the password */
		password_State = UART_recieveByte();
     e4e:	0e 94 1b 14 	call	0x2836	; 0x2836 <UART_recieveByte>
     e52:	8a 83       	std	Y+2, r24	; 0x02
		if(password_State == CORRECT_PASSWORD)
     e54:	8a 81       	ldd	r24, Y+2	; 0x02
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	69 f4       	brne	.+26     	; 0xe74 <Read_Password+0x1cc>
		{
			LCD_displayStringRowColumn(0,0,"Correct Password");
     e5a:	2d ec       	ldi	r18, 0xCD	; 205
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	a9 01       	movw	r20, r18
     e64:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
			_delay_second(2);
     e68:	82 e0       	ldi	r24, 0x02	; 2
     e6a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_delay_second>

			error_check = CLEAR;
     e6e:	10 92 97 01 	sts	0x0197, r1
     e72:	45 c0       	rjmp	.+138    	; 0xefe <Read_Password+0x256>
			return;
		}
		else if(password_State == WRONG_PASSWORD)
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	82 30       	cpi	r24, 0x02	; 2
     e78:	81 f4       	brne	.+32     	; 0xe9a <Read_Password+0x1f2>
		{
			LCD_displayStringRowColumn(0,0,"Wrong Password");
     e7a:	2e ed       	ldi	r18, 0xDE	; 222
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	a9 01       	movw	r20, r18
     e84:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
			_delay_second(2);
     e88:	82 e0       	ldi	r24, 0x02	; 2
     e8a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_delay_second>

			error_check = ERROR;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	80 93 97 01 	sts	0x0197, r24
			error_count ++;
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	8f 5f       	subi	r24, 0xFF	; 255
     e98:	89 83       	std	Y+1, r24	; 0x01
		}

		LCD_clearScreen();
     e9a:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>

		/* initializing the two arrays again so we can enter the read password loop again */
		strcpy(password_arr,"p1");
     e9e:	8e e7       	ldi	r24, 0x7E	; 126
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	20 e6       	ldi	r18, 0x60	; 96
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	b9 01       	movw	r22, r18
     ea8:	43 e0       	ldi	r20, 0x03	; 3
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	0e 94 ef 14 	call	0x29de	; 0x29de <memcpy>
		strcpy(password_confirm_arr,"p2");
     eb0:	88 e8       	ldi	r24, 0x88	; 136
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	23 e6       	ldi	r18, 0x63	; 99
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	b9 01       	movw	r22, r18
     eba:	43 e0       	ldi	r20, 0x03	; 3
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	0e 94 ef 14 	call	0x29de	; 0x29de <memcpy>
	LCD_clearScreen();



	/* While loop to confirm that the input password is correctly taken from the user */
	while(error_count < 3)
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
     ec4:	83 30       	cpi	r24, 0x03	; 3
     ec6:	08 f4       	brcc	.+2      	; 0xeca <Read_Password+0x222>
     ec8:	9b cf       	rjmp	.-202    	; 0xe00 <Read_Password+0x158>
		strcpy(password_arr,"p1");
		strcpy(password_confirm_arr,"p2");
	}

	/* Wait until MC2 is ready*/
	while(UART_recieveByte() != MC2_READY){}
     eca:	0e 94 1b 14 	call	0x2836	; 0x2836 <UART_recieveByte>
     ece:	80 31       	cpi	r24, 0x10	; 16
     ed0:	e1 f7       	brne	.-8      	; 0xeca <Read_Password+0x222>

	/* IF it ever gets outside while loop, it means that password is entered wrong 3
	 * times in row, so we fire buzzer */
	UART_sendByte(FIRE_BUZZER);
     ed2:	84 e0       	ldi	r24, 0x04	; 4
     ed4:	0e 94 04 14 	call	0x2808	; 0x2808 <UART_sendByte>

	/*Buzzer is fired for seconds */
	LCD_displayStringRowColumn(0,0,"WRONG PASSWORD");
     ed8:	2d ee       	ldi	r18, 0xED	; 237
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	a9 01       	movw	r20, r18
     ee2:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"BUZZER ON");
     ee6:	2c ef       	ldi	r18, 0xFC	; 252
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	a9 01       	movw	r20, r18
     ef0:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>

	_delay_second(10);
     ef4:	8a e0       	ldi	r24, 0x0A	; 10
     ef6:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_delay_second>

	LCD_clearScreen();
     efa:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>
	return ;
}
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	08 95       	ret

00000f0e <DOOR_CHOICE>:
 * 1. if the password is correct it, it opens the opens the door
 * 2. if the password has been entered wrong
 */

void DOOR_CHOICE(void)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	cd b7       	in	r28, 0x3d	; 61
     f14:	de b7       	in	r29, 0x3e	; 62

	LCD_clearScreen();
     f16:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>

	/* call the Read_Password function to test the password */
	Read_Password();
     f1a:	0e 94 54 06 	call	0xca8	; 0xca8 <Read_Password>

	/* Now checking on the error_check variable */
	if(error_check == CLEAR)
     f1e:	80 91 97 01 	lds	r24, 0x0197
     f22:	88 23       	and	r24, r24
     f24:	01 f5       	brne	.+64     	; 0xf66 <DOOR_CHOICE+0x58>
	{
		LCD_clearScreen();
     f26:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>


		/* Wait until MC2 is ready*/
		while(UART_recieveByte() != MC2_READY){}
     f2a:	0e 94 1b 14 	call	0x2836	; 0x2836 <UART_recieveByte>
     f2e:	80 31       	cpi	r24, 0x10	; 16
     f30:	e1 f7       	brne	.-8      	; 0xf2a <DOOR_CHOICE+0x1c>

		UART_sendByte(OPEN_DOOR);
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	0e 94 04 14 	call	0x2808	; 0x2808 <UART_sendByte>

		LCD_displayStringRowColumn(0,0,"Opening the");
     f38:	26 e0       	ldi	r18, 0x06	; 6
     f3a:	31 e0       	ldi	r19, 0x01	; 1
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	a9 01       	movw	r20, r18
     f42:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"Door");
     f46:	22 e1       	ldi	r18, 0x12	; 18
     f48:	31 e0       	ldi	r19, 0x01	; 1
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	a9 01       	movw	r20, r18
     f50:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>

		/* wait for 15 seconds until the door is opened */
		_delay_second(15);
     f54:	8f e0       	ldi	r24, 0x0F	; 15
     f56:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_delay_second>

		/* Keep the door open for 3 seconds */
		_delay_second(3);
     f5a:	83 e0       	ldi	r24, 0x03	; 3
     f5c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_delay_second>

		/* wait for 15 seconds until the door closed */
		_delay_second(15);
     f60:	8f e0       	ldi	r24, 0x0F	; 15
     f62:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_delay_second>
	}

	LCD_clearScreen();
     f66:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>
	return;
}
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	08 95       	ret

00000f70 <CHANGE_PASSWORD_CHOICE>:
 * Function to handle all operations done in the change password choice:
 * 1. if the password is correct it, password is taken from the user to be changed
 * 2. if the password has been entered wrong, it returns to the main menu
 */
void CHANGE_PASSWORD_CHOICE(void)
{
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	0f 92       	push	r0
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	/* Variable to be used in the for loop */
	uint8 i;

	LCD_clearScreen();
     f7e:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>

	/* Initializing the two password arrays before taking inputs from user */
	strcpy(password_arr,"p1");
     f82:	8e e7       	ldi	r24, 0x7E	; 126
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	20 e6       	ldi	r18, 0x60	; 96
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	b9 01       	movw	r22, r18
     f8c:	43 e0       	ldi	r20, 0x03	; 3
     f8e:	50 e0       	ldi	r21, 0x00	; 0
     f90:	0e 94 ef 14 	call	0x29de	; 0x29de <memcpy>
	strcpy(password_confirm_arr,"p2");
     f94:	88 e8       	ldi	r24, 0x88	; 136
     f96:	91 e0       	ldi	r25, 0x01	; 1
     f98:	23 e6       	ldi	r18, 0x63	; 99
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	b9 01       	movw	r22, r18
     f9e:	43 e0       	ldi	r20, 0x03	; 3
     fa0:	50 e0       	ldi	r21, 0x00	; 0
     fa2:	0e 94 ef 14 	call	0x29de	; 0x29de <memcpy>

	/* call the Read_Password function to test the password */
	Read_Password();
     fa6:	0e 94 54 06 	call	0xca8	; 0xca8 <Read_Password>


	/* Initializing the two password arrays before taking inputs from user */
	strcpy(password_arr,"p1");
     faa:	8e e7       	ldi	r24, 0x7E	; 126
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	20 e6       	ldi	r18, 0x60	; 96
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	b9 01       	movw	r22, r18
     fb4:	43 e0       	ldi	r20, 0x03	; 3
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	0e 94 ef 14 	call	0x29de	; 0x29de <memcpy>
	strcpy(password_confirm_arr,"p2");
     fbc:	88 e8       	ldi	r24, 0x88	; 136
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	23 e6       	ldi	r18, 0x63	; 99
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	b9 01       	movw	r22, r18
     fc6:	43 e0       	ldi	r20, 0x03	; 3
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	0e 94 ef 14 	call	0x29de	; 0x29de <memcpy>

	/* Now checking on the error_check variable */
	if(error_check == CLEAR)
     fce:	80 91 97 01 	lds	r24, 0x0197
     fd2:	88 23       	and	r24, r24
     fd4:	09 f0       	breq	.+2      	; 0xfd8 <CHANGE_PASSWORD_CHOICE+0x68>
     fd6:	ac c0       	rjmp	.+344    	; 0x1130 <CHANGE_PASSWORD_CHOICE+0x1c0>
	{
		/* Now taking the new password to be changed */
		LCD_clearScreen();
     fd8:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>
     fdc:	8e c0       	rjmp	.+284    	; 0x10fa <CHANGE_PASSWORD_CHOICE+0x18a>
		/* While loop to confirm that the input password is correctly taken from the user */
		while(strcmp(password_arr,password_confirm_arr) != 0)
		{

			/* checks if this is the first time the program enters this loop or not */
			if(confirm_check != 0)
     fde:	80 91 96 01 	lds	r24, 0x0196
     fe2:	88 23       	and	r24, r24
     fe4:	09 f1       	breq	.+66     	; 0x1028 <CHANGE_PASSWORD_CHOICE+0xb8>
			{
				LCD_displayStringRowColumn(0,0,"Password not");
     fe6:	26 e6       	ldi	r18, 0x66	; 102
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	a9 01       	movw	r20, r18
     ff0:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"Confirmed");
     ff4:	23 e7       	ldi	r18, 0x73	; 115
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	a9 01       	movw	r20, r18
     ffe:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(2,0,"Please re-enter");
    1002:	2d e7       	ldi	r18, 0x7D	; 125
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	82 e0       	ldi	r24, 0x02	; 2
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	a9 01       	movw	r20, r18
    100c:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(3,0,"your password !");
    1010:	2d e8       	ldi	r18, 0x8D	; 141
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	83 e0       	ldi	r24, 0x03	; 3
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	a9 01       	movw	r20, r18
    101a:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>

				/* delay for 5 seconds until the user reads the message */
				_delay_second(5);
    101e:	85 e0       	ldi	r24, 0x05	; 5
    1020:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_delay_second>

				LCD_clearScreen();
    1024:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>
			}

			/*Takes the password from the user and send it to MC2 */
			LCD_displayStringRowColumn(1,0,"Enter Your");
    1028:	2d e9       	ldi	r18, 0x9D	; 157
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	a9 01       	movw	r20, r18
    1032:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(2,0,"New Password !");
    1036:	27 e1       	ldi	r18, 0x17	; 23
    1038:	31 e0       	ldi	r19, 0x01	; 1
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	a9 01       	movw	r20, r18
    1040:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
			LCD_moveCursor(3,6);
    1044:	83 e0       	ldi	r24, 0x03	; 3
    1046:	66 e0       	ldi	r22, 0x06	; 6
    1048:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_moveCursor>

			/* A Loop to take the input password from the user */
			for(i=0; i<5; i++)
    104c:	19 82       	std	Y+1, r1	; 0x01
    104e:	15 c0       	rjmp	.+42     	; 0x107a <CHANGE_PASSWORD_CHOICE+0x10a>
			{
				password_arr[i] =  KEYPAD_getPressedKey();
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	08 2f       	mov	r16, r24
    1054:	10 e0       	ldi	r17, 0x00	; 0
    1056:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <KEYPAD_getPressedKey>
    105a:	f8 01       	movw	r30, r16
    105c:	e2 58       	subi	r30, 0x82	; 130
    105e:	fe 4f       	sbci	r31, 0xFE	; 254
    1060:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    1062:	8a e2       	ldi	r24, 0x2A	; 42
    1064:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_displayCharacter>


				/* delay for 500 milli second until the button is released */
				_delay_milli_second(50);
    1068:	62 e3       	ldi	r22, 0x32	; 50
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 05 06 	call	0xc0a	; 0xc0a <_delay_milli_second>
			LCD_displayStringRowColumn(1,0,"Enter Your");
			LCD_displayStringRowColumn(2,0,"New Password !");
			LCD_moveCursor(3,6);

			/* A Loop to take the input password from the user */
			for(i=0; i<5; i++)
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	8f 5f       	subi	r24, 0xFF	; 255
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	85 30       	cpi	r24, 0x05	; 5
    107e:	40 f3       	brcs	.-48     	; 0x1050 <CHANGE_PASSWORD_CHOICE+0xe0>

				/* delay for 500 milli second until the button is released */
				_delay_milli_second(50);
			}
			/* Inserting '#' at the end of the password so that the MC2 Stops on reading it */
			password_arr[5] = '#';
    1080:	83 e2       	ldi	r24, 0x23	; 35
    1082:	80 93 83 01 	sts	0x0183, r24
			/* Inserting the null '\0' at the end of the password so that the MC1
		       stops on sending it */
			password_arr[6] = '\0';
    1086:	10 92 84 01 	sts	0x0184, r1

			LCD_clearScreen();
    108a:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>

			/*confirming the password entered from the user*/
			LCD_displayStringRowColumn(1,0,"Please Confirm");
    108e:	23 eb       	ldi	r18, 0xB3	; 179
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	a9 01       	movw	r20, r18
    1098:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(2,0,"your password !");
    109c:	2d e8       	ldi	r18, 0x8D	; 141
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	a9 01       	movw	r20, r18
    10a6:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
			LCD_moveCursor(3,6);
    10aa:	83 e0       	ldi	r24, 0x03	; 3
    10ac:	66 e0       	ldi	r22, 0x06	; 6
    10ae:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_moveCursor>

			/* A Loop to take the input password from the user */
			for(i=0; i<5; i++)
    10b2:	19 82       	std	Y+1, r1	; 0x01
    10b4:	15 c0       	rjmp	.+42     	; 0x10e0 <CHANGE_PASSWORD_CHOICE+0x170>
			{
				password_confirm_arr[i] =  KEYPAD_getPressedKey();
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	08 2f       	mov	r16, r24
    10ba:	10 e0       	ldi	r17, 0x00	; 0
    10bc:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <KEYPAD_getPressedKey>
    10c0:	f8 01       	movw	r30, r16
    10c2:	e8 57       	subi	r30, 0x78	; 120
    10c4:	fe 4f       	sbci	r31, 0xFE	; 254
    10c6:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    10c8:	8a e2       	ldi	r24, 0x2A	; 42
    10ca:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_displayCharacter>


				/* delay for 500 milli second until the button is released */
				_delay_milli_second(50);
    10ce:	62 e3       	ldi	r22, 0x32	; 50
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 05 06 	call	0xc0a	; 0xc0a <_delay_milli_second>
			LCD_displayStringRowColumn(1,0,"Please Confirm");
			LCD_displayStringRowColumn(2,0,"your password !");
			LCD_moveCursor(3,6);

			/* A Loop to take the input password from the user */
			for(i=0; i<5; i++)
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	8f 5f       	subi	r24, 0xFF	; 255
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	85 30       	cpi	r24, 0x05	; 5
    10e4:	40 f3       	brcs	.-48     	; 0x10b6 <CHANGE_PASSWORD_CHOICE+0x146>

				/* delay for 500 milli second until the button is released */
				_delay_milli_second(50);
			}
			/* Inserting '#' at the end of the password so that the MC2 Stops on reading it */
			password_confirm_arr[5] = '#';
    10e6:	83 e2       	ldi	r24, 0x23	; 35
    10e8:	80 93 8d 01 	sts	0x018D, r24
			/* Inserting the null '\0' at the end of the password so that the MC1
		       stops on sending it */
			password_confirm_arr[6] = '\0';
    10ec:	10 92 8e 01 	sts	0x018E, r1

			LCD_clearScreen();
    10f0:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>

			/* changing the value of the confirm_check variable to recognize that the loop has
			   been entered  */
			confirm_check = 1;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	80 93 96 01 	sts	0x0196, r24
	{
		/* Now taking the new password to be changed */
		LCD_clearScreen();

		/* While loop to confirm that the input password is correctly taken from the user */
		while(strcmp(password_arr,password_confirm_arr) != 0)
    10fa:	8e e7       	ldi	r24, 0x7E	; 126
    10fc:	91 e0       	ldi	r25, 0x01	; 1
    10fe:	28 e8       	ldi	r18, 0x88	; 136
    1100:	31 e0       	ldi	r19, 0x01	; 1
    1102:	b9 01       	movw	r22, r18
    1104:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <strcmp>
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	09 f0       	breq	.+2      	; 0x110e <CHANGE_PASSWORD_CHOICE+0x19e>
    110c:	68 cf       	rjmp	.-304    	; 0xfde <CHANGE_PASSWORD_CHOICE+0x6e>
			   been entered  */
			confirm_check = 1;
		}

		/* re-set the value of confirm_check variable */
		confirm_check = 0;
    110e:	10 92 96 01 	sts	0x0196, r1

		/* Wait until MC2 is ready*/
		while(UART_recieveByte() != MC2_READY){}
    1112:	0e 94 1b 14 	call	0x2836	; 0x2836 <UART_recieveByte>
    1116:	80 31       	cpi	r24, 0x10	; 16
    1118:	e1 f7       	brne	.-8      	; 0x1112 <CHANGE_PASSWORD_CHOICE+0x1a2>

		/* Send the the change password command for MC2 */
		UART_sendByte(CHANGE_PASSWORD);
    111a:	85 e0       	ldi	r24, 0x05	; 5
    111c:	0e 94 04 14 	call	0x2808	; 0x2808 <UART_sendByte>

		/* Wait until MC2 is ready*/
		while(UART_recieveByte() != MC2_READY){}
    1120:	0e 94 1b 14 	call	0x2836	; 0x2836 <UART_recieveByte>
    1124:	80 31       	cpi	r24, 0x10	; 16
    1126:	e1 f7       	brne	.-8      	; 0x1120 <CHANGE_PASSWORD_CHOICE+0x1b0>

		/*sending the new confirmed password for MC2 */
		UART_sendString(password_arr);
    1128:	8e e7       	ldi	r24, 0x7E	; 126
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	0e 94 2a 14 	call	0x2854	; 0x2854 <UART_sendString>
	}

	return;
}
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	1f 91       	pop	r17
    1138:	0f 91       	pop	r16
    113a:	08 95       	ret

0000113c <main>:
 *                             Main Function                                   *
 *******************************************************************************
 *******************************************************************************/

int main(void)
{
    113c:	0f 93       	push	r16
    113e:	1f 93       	push	r17
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <main+0xa>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <main+0xc>
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
	/* Variable to be used in the for loop */
	uint8 i;

	/* declaring choice variable to use it in the program */
	uint8 choice = 0;
    114c:	19 82       	std	Y+1, r1	; 0x01

	LCD_init();
    114e:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <LCD_init>

	/*Setting up the Configuration object for UART */
	UART_config.Baud_Rate = 9600;
    1152:	80 e8       	ldi	r24, 0x80	; 128
    1154:	95 e2       	ldi	r25, 0x25	; 37
    1156:	a0 e0       	ldi	r26, 0x00	; 0
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	80 93 a0 01 	sts	0x01A0, r24
    115e:	90 93 a1 01 	sts	0x01A1, r25
    1162:	a0 93 a2 01 	sts	0x01A2, r26
    1166:	b0 93 a3 01 	sts	0x01A3, r27
	UART_config.Bits_Number = _8_BITS;
    116a:	83 e0       	ldi	r24, 0x03	; 3
    116c:	80 93 a4 01 	sts	0x01A4, r24
	UART_config.Parity = EVEN_PARITY;
    1170:	82 e0       	ldi	r24, 0x02	; 2
    1172:	80 93 a5 01 	sts	0x01A5, r24
	UART_config.Stop_Bits_Number = _1_STOP_BIT;
    1176:	10 92 a6 01 	sts	0x01A6, r1

	/* Initializing UART */
	UART_init(&UART_config);
    117a:	80 ea       	ldi	r24, 0xA0	; 160
    117c:	91 e0       	ldi	r25, 0x01	; 1
    117e:	0e 94 76 13 	call	0x26ec	; 0x26ec <UART_init>
	 * 6. if the wring password entered for 3 times in row, buzzer is fired for 10 seconds
	 */


	/* Showing the welcome message */
	LCD_displayStringRowColumn(0,3,"Welcome !");
    1182:	26 e2       	ldi	r18, 0x26	; 38
    1184:	31 e0       	ldi	r19, 0x01	; 1
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	63 e0       	ldi	r22, 0x03	; 3
    118a:	a9 01       	movw	r20, r18
    118c:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
    1190:	8e c0       	rjmp	.+284    	; 0x12ae <main+0x172>
	/* While loop to confirm that the input password is correctly taken from the user */
	while((strcmp(password_arr,password_confirm_arr)) != 0)
	{

		/* checks if this is the first time the program enters this loop or not */
		if(confirm_check != 0)
    1192:	80 91 96 01 	lds	r24, 0x0196
    1196:	88 23       	and	r24, r24
    1198:	09 f1       	breq	.+66     	; 0x11dc <main+0xa0>
		{
			LCD_displayStringRowColumn(0,0,"Password not");
    119a:	26 e6       	ldi	r18, 0x66	; 102
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	a9 01       	movw	r20, r18
    11a4:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1,0,"Confirmed");
    11a8:	23 e7       	ldi	r18, 0x73	; 115
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	a9 01       	movw	r20, r18
    11b2:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(2,0,"Please re-enter");
    11b6:	2d e7       	ldi	r18, 0x7D	; 125
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	82 e0       	ldi	r24, 0x02	; 2
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	a9 01       	movw	r20, r18
    11c0:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(3,0,"your password !");
    11c4:	2d e8       	ldi	r18, 0x8D	; 141
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	83 e0       	ldi	r24, 0x03	; 3
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	a9 01       	movw	r20, r18
    11ce:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>

			/* delay for 5 seconds until the user reads the message */
			_delay_second(5);
    11d2:	85 e0       	ldi	r24, 0x05	; 5
    11d4:	0e 94 bd 05 	call	0xb7a	; 0xb7a <_delay_second>

			LCD_clearScreen();
    11d8:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>
		}


		/*Takes the password from the user and send it to MC2 */
		LCD_displayStringRowColumn(1,0,"Enter Password");
    11dc:	20 e3       	ldi	r18, 0x30	; 48
    11de:	31 e0       	ldi	r19, 0x01	; 1
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	a9 01       	movw	r20, r18
    11e6:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(2,0,"of 5 numbers !");
    11ea:	2f e3       	ldi	r18, 0x3F	; 63
    11ec:	31 e0       	ldi	r19, 0x01	; 1
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	a9 01       	movw	r20, r18
    11f4:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
		LCD_moveCursor(3,6);
    11f8:	83 e0       	ldi	r24, 0x03	; 3
    11fa:	66 e0       	ldi	r22, 0x06	; 6
    11fc:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_moveCursor>

		/* A Loop to take the input password from the user */
		for(i=0; i<5; i++)
    1200:	1a 82       	std	Y+2, r1	; 0x02
    1202:	15 c0       	rjmp	.+42     	; 0x122e <main+0xf2>
		{
			password_arr[i] =  KEYPAD_getPressedKey();
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	08 2f       	mov	r16, r24
    1208:	10 e0       	ldi	r17, 0x00	; 0
    120a:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <KEYPAD_getPressedKey>
    120e:	f8 01       	movw	r30, r16
    1210:	e2 58       	subi	r30, 0x82	; 130
    1212:	fe 4f       	sbci	r31, 0xFE	; 254
    1214:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    1216:	8a e2       	ldi	r24, 0x2A	; 42
    1218:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_displayCharacter>

			/* delay for 500 milli second until the button is released */
			_delay_milli_second(50);
    121c:	62 e3       	ldi	r22, 0x32	; 50
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	0e 94 05 06 	call	0xc0a	; 0xc0a <_delay_milli_second>
		LCD_displayStringRowColumn(1,0,"Enter Password");
		LCD_displayStringRowColumn(2,0,"of 5 numbers !");
		LCD_moveCursor(3,6);

		/* A Loop to take the input password from the user */
		for(i=0; i<5; i++)
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	8f 5f       	subi	r24, 0xFF	; 255
    122c:	8a 83       	std	Y+2, r24	; 0x02
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	85 30       	cpi	r24, 0x05	; 5
    1232:	40 f3       	brcs	.-48     	; 0x1204 <main+0xc8>
			/* delay for 500 milli second until the button is released */
			_delay_milli_second(50);

		}
		/* Inserting '#' at the end of the password so that the MC2 Stops on reading it */
		password_arr[5] = '#';
    1234:	83 e2       	ldi	r24, 0x23	; 35
    1236:	80 93 83 01 	sts	0x0183, r24
		/* Inserting the null '\0' at the end of the password so that the MC1
	       stops on sending it */
		password_arr[6] = '\0';
    123a:	10 92 84 01 	sts	0x0184, r1

		LCD_clearScreen();
    123e:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>

		/*confirming the password entered from the user*/
		LCD_displayStringRowColumn(1,0,"Please Confirm");
    1242:	23 eb       	ldi	r18, 0xB3	; 179
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	a9 01       	movw	r20, r18
    124c:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(2,0,"your password !");
    1250:	2d e8       	ldi	r18, 0x8D	; 141
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	82 e0       	ldi	r24, 0x02	; 2
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	a9 01       	movw	r20, r18
    125a:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
		LCD_moveCursor(3,6);
    125e:	83 e0       	ldi	r24, 0x03	; 3
    1260:	66 e0       	ldi	r22, 0x06	; 6
    1262:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_moveCursor>

		/* A Loop to take the input password from the user */
		for(i=0; i<5; i++)
    1266:	1a 82       	std	Y+2, r1	; 0x02
    1268:	15 c0       	rjmp	.+42     	; 0x1294 <main+0x158>
		{
			password_confirm_arr[i] =  KEYPAD_getPressedKey();
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	08 2f       	mov	r16, r24
    126e:	10 e0       	ldi	r17, 0x00	; 0
    1270:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <KEYPAD_getPressedKey>
    1274:	f8 01       	movw	r30, r16
    1276:	e8 57       	subi	r30, 0x78	; 120
    1278:	fe 4f       	sbci	r31, 0xFE	; 254
    127a:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    127c:	8a e2       	ldi	r24, 0x2A	; 42
    127e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_displayCharacter>

			/* delay for 500 milli second until the button is released */
			_delay_milli_second(50);
    1282:	62 e3       	ldi	r22, 0x32	; 50
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 05 06 	call	0xc0a	; 0xc0a <_delay_milli_second>
		LCD_displayStringRowColumn(1,0,"Please Confirm");
		LCD_displayStringRowColumn(2,0,"your password !");
		LCD_moveCursor(3,6);

		/* A Loop to take the input password from the user */
		for(i=0; i<5; i++)
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	8f 5f       	subi	r24, 0xFF	; 255
    1292:	8a 83       	std	Y+2, r24	; 0x02
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	85 30       	cpi	r24, 0x05	; 5
    1298:	40 f3       	brcs	.-48     	; 0x126a <main+0x12e>
			/* delay for 500 milli second until the button is released */
			_delay_milli_second(50);

		}
		/* Inserting '#' at the end of the password so that the MC2 Stops on reading it */
		password_confirm_arr[5] = '#';
    129a:	83 e2       	ldi	r24, 0x23	; 35
    129c:	80 93 8d 01 	sts	0x018D, r24
		/* Inserting the null '\0' at the end of the password so that the MC1
	       stops on sending it */
		password_confirm_arr[6] = '\0';
    12a0:	10 92 8e 01 	sts	0x018E, r1

		LCD_clearScreen();
    12a4:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>

		/* changing the value of the confirm_check variable to recognize that the loop has
		   been entered  */
		confirm_check = 1;
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	80 93 96 01 	sts	0x0196, r24

	/* Showing the welcome message */
	LCD_displayStringRowColumn(0,3,"Welcome !");

	/* While loop to confirm that the input password is correctly taken from the user */
	while((strcmp(password_arr,password_confirm_arr)) != 0)
    12ae:	8e e7       	ldi	r24, 0x7E	; 126
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    12b2:	28 e8       	ldi	r18, 0x88	; 136
    12b4:	31 e0       	ldi	r19, 0x01	; 1
    12b6:	b9 01       	movw	r22, r18
    12b8:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <strcmp>
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	09 f0       	breq	.+2      	; 0x12c2 <main+0x186>
    12c0:	68 cf       	rjmp	.-304    	; 0x1192 <main+0x56>
		   been entered  */
		confirm_check = 1;
	}

	/* re-set the value of confirm_check variable */
	confirm_check = 0;
    12c2:	10 92 96 01 	sts	0x0196, r1

	/*sending the confirmed password for MC2 */
	UART_sendString(password_arr);
    12c6:	8e e7       	ldi	r24, 0x7E	; 126
    12c8:	91 e0       	ldi	r25, 0x01	; 1
    12ca:	0e 94 2a 14 	call	0x2854	; 0x2854 <UART_sendString>


	/* Showing the menu to choose between opening the door or changing the password */
	while(1)
	{
		LCD_displayStringRowColumn(1,0,"+: Open the door");
    12ce:	2e e4       	ldi	r18, 0x4E	; 78
    12d0:	31 e0       	ldi	r19, 0x01	; 1
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	a9 01       	movw	r20, r18
    12d8:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(2,0,"-: Change the");
    12dc:	2f e5       	ldi	r18, 0x5F	; 95
    12de:	31 e0       	ldi	r19, 0x01	; 1
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	a9 01       	movw	r20, r18
    12e6:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(3,3,"password");
    12ea:	2d e6       	ldi	r18, 0x6D	; 109
    12ec:	31 e0       	ldi	r19, 0x01	; 1
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	63 e0       	ldi	r22, 0x03	; 3
    12f2:	a9 01       	movw	r20, r18
    12f4:	0e 94 43 12 	call	0x2486	; 0x2486 <LCD_displayStringRowColumn>

		/* taking the choice from the user*/
		choice = KEYPAD_getPressedKey();
    12f8:	0e 94 d5 0c 	call	0x19aa	; 0x19aa <KEYPAD_getPressedKey>
    12fc:	89 83       	std	Y+1, r24	; 0x01

		switch(choice)
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	3c 83       	std	Y+4, r19	; 0x04
    1306:	2b 83       	std	Y+3, r18	; 0x03
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	8b 32       	cpi	r24, 0x2B	; 43
    130e:	91 05       	cpc	r25, r1
    1310:	31 f0       	breq	.+12     	; 0x131e <main+0x1e2>
    1312:	2b 81       	ldd	r18, Y+3	; 0x03
    1314:	3c 81       	ldd	r19, Y+4	; 0x04
    1316:	2d 32       	cpi	r18, 0x2D	; 45
    1318:	31 05       	cpc	r19, r1
    131a:	21 f0       	breq	.+8      	; 0x1324 <main+0x1e8>
    131c:	05 c0       	rjmp	.+10     	; 0x1328 <main+0x1ec>
		{
		case '+': DOOR_CHOICE();
    131e:	0e 94 87 07 	call	0xf0e	; 0xf0e <DOOR_CHOICE>
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <main+0x1ec>
		          break;
		case '-': CHANGE_PASSWORD_CHOICE();
    1324:	0e 94 b8 07 	call	0xf70	; 0xf70 <CHANGE_PASSWORD_CHOICE>
		          break;
		}
		LCD_clearScreen();
    1328:	0e 94 7f 12 	call	0x24fe	; 0x24fe <LCD_clearScreen>
    132c:	d0 cf       	rjmp	.-96     	; 0x12ce <main+0x192>

0000132e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    132e:	df 93       	push	r29
    1330:	cf 93       	push	r28
    1332:	00 d0       	rcall	.+0      	; 0x1334 <GPIO_setupPinDirection+0x6>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <GPIO_setupPinDirection+0x8>
    1336:	0f 92       	push	r0
    1338:	cd b7       	in	r28, 0x3d	; 61
    133a:	de b7       	in	r29, 0x3e	; 62
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	6a 83       	std	Y+2, r22	; 0x02
    1340:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1342:	8a 81       	ldd	r24, Y+2	; 0x02
    1344:	88 30       	cpi	r24, 0x08	; 8
    1346:	08 f0       	brcs	.+2      	; 0x134a <GPIO_setupPinDirection+0x1c>
    1348:	d5 c0       	rjmp	.+426    	; 0x14f4 <GPIO_setupPinDirection+0x1c6>
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	84 30       	cpi	r24, 0x04	; 4
    134e:	08 f0       	brcs	.+2      	; 0x1352 <GPIO_setupPinDirection+0x24>
    1350:	d1 c0       	rjmp	.+418    	; 0x14f4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	3d 83       	std	Y+5, r19	; 0x05
    135a:	2c 83       	std	Y+4, r18	; 0x04
    135c:	8c 81       	ldd	r24, Y+4	; 0x04
    135e:	9d 81       	ldd	r25, Y+5	; 0x05
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	91 05       	cpc	r25, r1
    1364:	09 f4       	brne	.+2      	; 0x1368 <GPIO_setupPinDirection+0x3a>
    1366:	43 c0       	rjmp	.+134    	; 0x13ee <GPIO_setupPinDirection+0xc0>
    1368:	2c 81       	ldd	r18, Y+4	; 0x04
    136a:	3d 81       	ldd	r19, Y+5	; 0x05
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	2c f4       	brge	.+10     	; 0x137c <GPIO_setupPinDirection+0x4e>
    1372:	8c 81       	ldd	r24, Y+4	; 0x04
    1374:	9d 81       	ldd	r25, Y+5	; 0x05
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	71 f0       	breq	.+28     	; 0x1396 <GPIO_setupPinDirection+0x68>
    137a:	bc c0       	rjmp	.+376    	; 0x14f4 <GPIO_setupPinDirection+0x1c6>
    137c:	2c 81       	ldd	r18, Y+4	; 0x04
    137e:	3d 81       	ldd	r19, Y+5	; 0x05
    1380:	22 30       	cpi	r18, 0x02	; 2
    1382:	31 05       	cpc	r19, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <GPIO_setupPinDirection+0x5a>
    1386:	5f c0       	rjmp	.+190    	; 0x1446 <GPIO_setupPinDirection+0x118>
    1388:	8c 81       	ldd	r24, Y+4	; 0x04
    138a:	9d 81       	ldd	r25, Y+5	; 0x05
    138c:	83 30       	cpi	r24, 0x03	; 3
    138e:	91 05       	cpc	r25, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <GPIO_setupPinDirection+0x66>
    1392:	85 c0       	rjmp	.+266    	; 0x149e <GPIO_setupPinDirection+0x170>
    1394:	af c0       	rjmp	.+350    	; 0x14f4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	a1 f4       	brne	.+40     	; 0x13c4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    139c:	aa e3       	ldi	r26, 0x3A	; 58
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	ea e3       	ldi	r30, 0x3A	; 58
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <GPIO_setupPinDirection+0x8c>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <GPIO_setupPinDirection+0x88>
    13be:	84 2b       	or	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	98 c0       	rjmp	.+304    	; 0x14f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13c4:	aa e3       	ldi	r26, 0x3A	; 58
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	ea e3       	ldi	r30, 0x3A	; 58
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	02 2e       	mov	r0, r18
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <GPIO_setupPinDirection+0xb4>
    13de:	88 0f       	add	r24, r24
    13e0:	99 1f       	adc	r25, r25
    13e2:	0a 94       	dec	r0
    13e4:	e2 f7       	brpl	.-8      	; 0x13de <GPIO_setupPinDirection+0xb0>
    13e6:	80 95       	com	r24
    13e8:	84 23       	and	r24, r20
    13ea:	8c 93       	st	X, r24
    13ec:	83 c0       	rjmp	.+262    	; 0x14f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	81 30       	cpi	r24, 0x01	; 1
    13f2:	a1 f4       	brne	.+40     	; 0x141c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13f4:	a7 e3       	ldi	r26, 0x37	; 55
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e7 e3       	ldi	r30, 0x37	; 55
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 2e       	mov	r0, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <GPIO_setupPinDirection+0xe4>
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <GPIO_setupPinDirection+0xe0>
    1416:	84 2b       	or	r24, r20
    1418:	8c 93       	st	X, r24
    141a:	6c c0       	rjmp	.+216    	; 0x14f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    141c:	a7 e3       	ldi	r26, 0x37	; 55
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e7 e3       	ldi	r30, 0x37	; 55
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <GPIO_setupPinDirection+0x10c>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <GPIO_setupPinDirection+0x108>
    143e:	80 95       	com	r24
    1440:	84 23       	and	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	57 c0       	rjmp	.+174    	; 0x14f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	a1 f4       	brne	.+40     	; 0x1474 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    144c:	a4 e3       	ldi	r26, 0x34	; 52
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e4 e3       	ldi	r30, 0x34	; 52
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	48 2f       	mov	r20, r24
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	02 2e       	mov	r0, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <GPIO_setupPinDirection+0x13c>
    1466:	88 0f       	add	r24, r24
    1468:	99 1f       	adc	r25, r25
    146a:	0a 94       	dec	r0
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <GPIO_setupPinDirection+0x138>
    146e:	84 2b       	or	r24, r20
    1470:	8c 93       	st	X, r24
    1472:	40 c0       	rjmp	.+128    	; 0x14f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1474:	a4 e3       	ldi	r26, 0x34	; 52
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e4 e3       	ldi	r30, 0x34	; 52
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	48 2f       	mov	r20, r24
    1480:	8a 81       	ldd	r24, Y+2	; 0x02
    1482:	28 2f       	mov	r18, r24
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 2e       	mov	r0, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <GPIO_setupPinDirection+0x164>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	0a 94       	dec	r0
    1494:	e2 f7       	brpl	.-8      	; 0x148e <GPIO_setupPinDirection+0x160>
    1496:	80 95       	com	r24
    1498:	84 23       	and	r24, r20
    149a:	8c 93       	st	X, r24
    149c:	2b c0       	rjmp	.+86     	; 0x14f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	81 30       	cpi	r24, 0x01	; 1
    14a2:	a1 f4       	brne	.+40     	; 0x14cc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    14a4:	a1 e3       	ldi	r26, 0x31	; 49
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	e1 e3       	ldi	r30, 0x31	; 49
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	80 81       	ld	r24, Z
    14ae:	48 2f       	mov	r20, r24
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	02 2e       	mov	r0, r18
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <GPIO_setupPinDirection+0x194>
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	0a 94       	dec	r0
    14c4:	e2 f7       	brpl	.-8      	; 0x14be <GPIO_setupPinDirection+0x190>
    14c6:	84 2b       	or	r24, r20
    14c8:	8c 93       	st	X, r24
    14ca:	14 c0       	rjmp	.+40     	; 0x14f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14cc:	a1 e3       	ldi	r26, 0x31	; 49
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e1 e3       	ldi	r30, 0x31	; 49
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 2e       	mov	r0, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <GPIO_setupPinDirection+0x1bc>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <GPIO_setupPinDirection+0x1b8>
    14ee:	80 95       	com	r24
    14f0:	84 23       	and	r24, r20
    14f2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	00 d0       	rcall	.+0      	; 0x150a <GPIO_writePin+0x6>
    150a:	00 d0       	rcall	.+0      	; 0x150c <GPIO_writePin+0x8>
    150c:	0f 92       	push	r0
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	6a 83       	std	Y+2, r22	; 0x02
    1516:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	88 30       	cpi	r24, 0x08	; 8
    151c:	08 f0       	brcs	.+2      	; 0x1520 <GPIO_writePin+0x1c>
    151e:	d5 c0       	rjmp	.+426    	; 0x16ca <GPIO_writePin+0x1c6>
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	84 30       	cpi	r24, 0x04	; 4
    1524:	08 f0       	brcs	.+2      	; 0x1528 <GPIO_writePin+0x24>
    1526:	d1 c0       	rjmp	.+418    	; 0x16ca <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	3d 83       	std	Y+5, r19	; 0x05
    1530:	2c 83       	std	Y+4, r18	; 0x04
    1532:	8c 81       	ldd	r24, Y+4	; 0x04
    1534:	9d 81       	ldd	r25, Y+5	; 0x05
    1536:	81 30       	cpi	r24, 0x01	; 1
    1538:	91 05       	cpc	r25, r1
    153a:	09 f4       	brne	.+2      	; 0x153e <GPIO_writePin+0x3a>
    153c:	43 c0       	rjmp	.+134    	; 0x15c4 <GPIO_writePin+0xc0>
    153e:	2c 81       	ldd	r18, Y+4	; 0x04
    1540:	3d 81       	ldd	r19, Y+5	; 0x05
    1542:	22 30       	cpi	r18, 0x02	; 2
    1544:	31 05       	cpc	r19, r1
    1546:	2c f4       	brge	.+10     	; 0x1552 <GPIO_writePin+0x4e>
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
    154a:	9d 81       	ldd	r25, Y+5	; 0x05
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	71 f0       	breq	.+28     	; 0x156c <GPIO_writePin+0x68>
    1550:	bc c0       	rjmp	.+376    	; 0x16ca <GPIO_writePin+0x1c6>
    1552:	2c 81       	ldd	r18, Y+4	; 0x04
    1554:	3d 81       	ldd	r19, Y+5	; 0x05
    1556:	22 30       	cpi	r18, 0x02	; 2
    1558:	31 05       	cpc	r19, r1
    155a:	09 f4       	brne	.+2      	; 0x155e <GPIO_writePin+0x5a>
    155c:	5f c0       	rjmp	.+190    	; 0x161c <GPIO_writePin+0x118>
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	9d 81       	ldd	r25, Y+5	; 0x05
    1562:	83 30       	cpi	r24, 0x03	; 3
    1564:	91 05       	cpc	r25, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <GPIO_writePin+0x66>
    1568:	85 c0       	rjmp	.+266    	; 0x1674 <GPIO_writePin+0x170>
    156a:	af c0       	rjmp	.+350    	; 0x16ca <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	a1 f4       	brne	.+40     	; 0x159a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1572:	ab e3       	ldi	r26, 0x3B	; 59
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	eb e3       	ldi	r30, 0x3B	; 59
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	02 2e       	mov	r0, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <GPIO_writePin+0x8c>
    158c:	88 0f       	add	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	0a 94       	dec	r0
    1592:	e2 f7       	brpl	.-8      	; 0x158c <GPIO_writePin+0x88>
    1594:	84 2b       	or	r24, r20
    1596:	8c 93       	st	X, r24
    1598:	98 c0       	rjmp	.+304    	; 0x16ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    159a:	ab e3       	ldi	r26, 0x3B	; 59
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	eb e3       	ldi	r30, 0x3B	; 59
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	48 2f       	mov	r20, r24
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	02 2e       	mov	r0, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <GPIO_writePin+0xb4>
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	0a 94       	dec	r0
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <GPIO_writePin+0xb0>
    15bc:	80 95       	com	r24
    15be:	84 23       	and	r24, r20
    15c0:	8c 93       	st	X, r24
    15c2:	83 c0       	rjmp	.+262    	; 0x16ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	a1 f4       	brne	.+40     	; 0x15f2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15ca:	a8 e3       	ldi	r26, 0x38	; 56
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e8 e3       	ldi	r30, 0x38	; 56
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <GPIO_writePin+0xe4>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <GPIO_writePin+0xe0>
    15ec:	84 2b       	or	r24, r20
    15ee:	8c 93       	st	X, r24
    15f0:	6c c0       	rjmp	.+216    	; 0x16ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15f2:	a8 e3       	ldi	r26, 0x38	; 56
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e8 e3       	ldi	r30, 0x38	; 56
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	48 2f       	mov	r20, r24
    15fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1600:	28 2f       	mov	r18, r24
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	02 2e       	mov	r0, r18
    160a:	02 c0       	rjmp	.+4      	; 0x1610 <GPIO_writePin+0x10c>
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	0a 94       	dec	r0
    1612:	e2 f7       	brpl	.-8      	; 0x160c <GPIO_writePin+0x108>
    1614:	80 95       	com	r24
    1616:	84 23       	and	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	57 c0       	rjmp	.+174    	; 0x16ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	a1 f4       	brne	.+40     	; 0x164a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1622:	a5 e3       	ldi	r26, 0x35	; 53
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e5 e3       	ldi	r30, 0x35	; 53
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <GPIO_writePin+0x13c>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <GPIO_writePin+0x138>
    1644:	84 2b       	or	r24, r20
    1646:	8c 93       	st	X, r24
    1648:	40 c0       	rjmp	.+128    	; 0x16ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    164a:	a5 e3       	ldi	r26, 0x35	; 53
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e5 e3       	ldi	r30, 0x35	; 53
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <GPIO_writePin+0x164>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <GPIO_writePin+0x160>
    166c:	80 95       	com	r24
    166e:	84 23       	and	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	2b c0       	rjmp	.+86     	; 0x16ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	a1 f4       	brne	.+40     	; 0x16a2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    167a:	a2 e3       	ldi	r26, 0x32	; 50
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	e2 e3       	ldi	r30, 0x32	; 50
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	48 2f       	mov	r20, r24
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	02 2e       	mov	r0, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <GPIO_writePin+0x194>
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <GPIO_writePin+0x190>
    169c:	84 2b       	or	r24, r20
    169e:	8c 93       	st	X, r24
    16a0:	14 c0       	rjmp	.+40     	; 0x16ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    16a2:	a2 e3       	ldi	r26, 0x32	; 50
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e2 e3       	ldi	r30, 0x32	; 50
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	48 2f       	mov	r20, r24
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 2e       	mov	r0, r18
    16ba:	02 c0       	rjmp	.+4      	; 0x16c0 <GPIO_writePin+0x1bc>
    16bc:	88 0f       	add	r24, r24
    16be:	99 1f       	adc	r25, r25
    16c0:	0a 94       	dec	r0
    16c2:	e2 f7       	brpl	.-8      	; 0x16bc <GPIO_writePin+0x1b8>
    16c4:	80 95       	com	r24
    16c6:	84 23       	and	r24, r20
    16c8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <GPIO_readPin+0x6>
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <GPIO_readPin+0x8>
    16e2:	0f 92       	push	r0
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	8a 83       	std	Y+2, r24	; 0x02
    16ea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16ec:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16ee:	8b 81       	ldd	r24, Y+3	; 0x03
    16f0:	88 30       	cpi	r24, 0x08	; 8
    16f2:	08 f0       	brcs	.+2      	; 0x16f6 <GPIO_readPin+0x1c>
    16f4:	84 c0       	rjmp	.+264    	; 0x17fe <GPIO_readPin+0x124>
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	84 30       	cpi	r24, 0x04	; 4
    16fa:	08 f0       	brcs	.+2      	; 0x16fe <GPIO_readPin+0x24>
    16fc:	80 c0       	rjmp	.+256    	; 0x17fe <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	3d 83       	std	Y+5, r19	; 0x05
    1706:	2c 83       	std	Y+4, r18	; 0x04
    1708:	4c 81       	ldd	r20, Y+4	; 0x04
    170a:	5d 81       	ldd	r21, Y+5	; 0x05
    170c:	41 30       	cpi	r20, 0x01	; 1
    170e:	51 05       	cpc	r21, r1
    1710:	79 f1       	breq	.+94     	; 0x1770 <GPIO_readPin+0x96>
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	9d 81       	ldd	r25, Y+5	; 0x05
    1716:	82 30       	cpi	r24, 0x02	; 2
    1718:	91 05       	cpc	r25, r1
    171a:	34 f4       	brge	.+12     	; 0x1728 <GPIO_readPin+0x4e>
    171c:	2c 81       	ldd	r18, Y+4	; 0x04
    171e:	3d 81       	ldd	r19, Y+5	; 0x05
    1720:	21 15       	cp	r18, r1
    1722:	31 05       	cpc	r19, r1
    1724:	69 f0       	breq	.+26     	; 0x1740 <GPIO_readPin+0x66>
    1726:	6b c0       	rjmp	.+214    	; 0x17fe <GPIO_readPin+0x124>
    1728:	4c 81       	ldd	r20, Y+4	; 0x04
    172a:	5d 81       	ldd	r21, Y+5	; 0x05
    172c:	42 30       	cpi	r20, 0x02	; 2
    172e:	51 05       	cpc	r21, r1
    1730:	b9 f1       	breq	.+110    	; 0x17a0 <GPIO_readPin+0xc6>
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	9d 81       	ldd	r25, Y+5	; 0x05
    1736:	83 30       	cpi	r24, 0x03	; 3
    1738:	91 05       	cpc	r25, r1
    173a:	09 f4       	brne	.+2      	; 0x173e <GPIO_readPin+0x64>
    173c:	49 c0       	rjmp	.+146    	; 0x17d0 <GPIO_readPin+0xf6>
    173e:	5f c0       	rjmp	.+190    	; 0x17fe <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1740:	e9 e3       	ldi	r30, 0x39	; 57
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	28 2f       	mov	r18, r24
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	8b 81       	ldd	r24, Y+3	; 0x03
    174c:	88 2f       	mov	r24, r24
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	a9 01       	movw	r20, r18
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <GPIO_readPin+0x7e>
    1754:	55 95       	asr	r21
    1756:	47 95       	ror	r20
    1758:	8a 95       	dec	r24
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <GPIO_readPin+0x7a>
    175c:	ca 01       	movw	r24, r20
    175e:	81 70       	andi	r24, 0x01	; 1
    1760:	90 70       	andi	r25, 0x00	; 0
    1762:	88 23       	and	r24, r24
    1764:	19 f0       	breq	.+6      	; 0x176c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	49 c0       	rjmp	.+146    	; 0x17fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    176c:	19 82       	std	Y+1, r1	; 0x01
    176e:	47 c0       	rjmp	.+142    	; 0x17fe <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1770:	e6 e3       	ldi	r30, 0x36	; 54
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a9 01       	movw	r20, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <GPIO_readPin+0xae>
    1784:	55 95       	asr	r21
    1786:	47 95       	ror	r20
    1788:	8a 95       	dec	r24
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <GPIO_readPin+0xaa>
    178c:	ca 01       	movw	r24, r20
    178e:	81 70       	andi	r24, 0x01	; 1
    1790:	90 70       	andi	r25, 0x00	; 0
    1792:	88 23       	and	r24, r24
    1794:	19 f0       	breq	.+6      	; 0x179c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	31 c0       	rjmp	.+98     	; 0x17fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    179c:	19 82       	std	Y+1, r1	; 0x01
    179e:	2f c0       	rjmp	.+94     	; 0x17fe <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    17a0:	e3 e3       	ldi	r30, 0x33	; 51
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	88 2f       	mov	r24, r24
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	a9 01       	movw	r20, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <GPIO_readPin+0xde>
    17b4:	55 95       	asr	r21
    17b6:	47 95       	ror	r20
    17b8:	8a 95       	dec	r24
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <GPIO_readPin+0xda>
    17bc:	ca 01       	movw	r24, r20
    17be:	81 70       	andi	r24, 0x01	; 1
    17c0:	90 70       	andi	r25, 0x00	; 0
    17c2:	88 23       	and	r24, r24
    17c4:	19 f0       	breq	.+6      	; 0x17cc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17c6:	81 e0       	ldi	r24, 0x01	; 1
    17c8:	89 83       	std	Y+1, r24	; 0x01
    17ca:	19 c0       	rjmp	.+50     	; 0x17fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17cc:	19 82       	std	Y+1, r1	; 0x01
    17ce:	17 c0       	rjmp	.+46     	; 0x17fe <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17d0:	e0 e3       	ldi	r30, 0x30	; 48
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	28 2f       	mov	r18, r24
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	88 2f       	mov	r24, r24
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a9 01       	movw	r20, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <GPIO_readPin+0x10e>
    17e4:	55 95       	asr	r21
    17e6:	47 95       	ror	r20
    17e8:	8a 95       	dec	r24
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <GPIO_readPin+0x10a>
    17ec:	ca 01       	movw	r24, r20
    17ee:	81 70       	andi	r24, 0x01	; 1
    17f0:	90 70       	andi	r25, 0x00	; 0
    17f2:	88 23       	and	r24, r24
    17f4:	19 f0       	breq	.+6      	; 0x17fc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	89 83       	std	Y+1, r24	; 0x01
    17fa:	01 c0       	rjmp	.+2      	; 0x17fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17fc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <GPIO_setupPortDirection+0x6>
    1816:	00 d0       	rcall	.+0      	; 0x1818 <GPIO_setupPortDirection+0x8>
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	84 30       	cpi	r24, 0x04	; 4
    1824:	90 f5       	brcc	.+100    	; 0x188a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	3c 83       	std	Y+4, r19	; 0x04
    182e:	2b 83       	std	Y+3, r18	; 0x03
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	91 05       	cpc	r25, r1
    1838:	d1 f0       	breq	.+52     	; 0x186e <GPIO_setupPortDirection+0x5e>
    183a:	2b 81       	ldd	r18, Y+3	; 0x03
    183c:	3c 81       	ldd	r19, Y+4	; 0x04
    183e:	22 30       	cpi	r18, 0x02	; 2
    1840:	31 05       	cpc	r19, r1
    1842:	2c f4       	brge	.+10     	; 0x184e <GPIO_setupPortDirection+0x3e>
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	9c 81       	ldd	r25, Y+4	; 0x04
    1848:	00 97       	sbiw	r24, 0x00	; 0
    184a:	61 f0       	breq	.+24     	; 0x1864 <GPIO_setupPortDirection+0x54>
    184c:	1e c0       	rjmp	.+60     	; 0x188a <GPIO_setupPortDirection+0x7a>
    184e:	2b 81       	ldd	r18, Y+3	; 0x03
    1850:	3c 81       	ldd	r19, Y+4	; 0x04
    1852:	22 30       	cpi	r18, 0x02	; 2
    1854:	31 05       	cpc	r19, r1
    1856:	81 f0       	breq	.+32     	; 0x1878 <GPIO_setupPortDirection+0x68>
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	9c 81       	ldd	r25, Y+4	; 0x04
    185c:	83 30       	cpi	r24, 0x03	; 3
    185e:	91 05       	cpc	r25, r1
    1860:	81 f0       	breq	.+32     	; 0x1882 <GPIO_setupPortDirection+0x72>
    1862:	13 c0       	rjmp	.+38     	; 0x188a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1864:	ea e3       	ldi	r30, 0x3A	; 58
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	80 83       	st	Z, r24
    186c:	0e c0       	rjmp	.+28     	; 0x188a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    186e:	e7 e3       	ldi	r30, 0x37	; 55
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	80 83       	st	Z, r24
    1876:	09 c0       	rjmp	.+18     	; 0x188a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1878:	e4 e3       	ldi	r30, 0x34	; 52
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	80 83       	st	Z, r24
    1880:	04 c0       	rjmp	.+8      	; 0x188a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1882:	e1 e3       	ldi	r30, 0x31	; 49
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	80 83       	st	Z, r24
			break;
		}
	}
}
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <GPIO_writePort+0x6>
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <GPIO_writePort+0x8>
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	84 30       	cpi	r24, 0x04	; 4
    18ac:	90 f5       	brcc	.+100    	; 0x1912 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	3c 83       	std	Y+4, r19	; 0x04
    18b6:	2b 83       	std	Y+3, r18	; 0x03
    18b8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ba:	9c 81       	ldd	r25, Y+4	; 0x04
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	91 05       	cpc	r25, r1
    18c0:	d1 f0       	breq	.+52     	; 0x18f6 <GPIO_writePort+0x5e>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	22 30       	cpi	r18, 0x02	; 2
    18c8:	31 05       	cpc	r19, r1
    18ca:	2c f4       	brge	.+10     	; 0x18d6 <GPIO_writePort+0x3e>
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	00 97       	sbiw	r24, 0x00	; 0
    18d2:	61 f0       	breq	.+24     	; 0x18ec <GPIO_writePort+0x54>
    18d4:	1e c0       	rjmp	.+60     	; 0x1912 <GPIO_writePort+0x7a>
    18d6:	2b 81       	ldd	r18, Y+3	; 0x03
    18d8:	3c 81       	ldd	r19, Y+4	; 0x04
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	81 f0       	breq	.+32     	; 0x1900 <GPIO_writePort+0x68>
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	9c 81       	ldd	r25, Y+4	; 0x04
    18e4:	83 30       	cpi	r24, 0x03	; 3
    18e6:	91 05       	cpc	r25, r1
    18e8:	81 f0       	breq	.+32     	; 0x190a <GPIO_writePort+0x72>
    18ea:	13 c0       	rjmp	.+38     	; 0x1912 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18ec:	eb e3       	ldi	r30, 0x3B	; 59
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	80 83       	st	Z, r24
    18f4:	0e c0       	rjmp	.+28     	; 0x1912 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18f6:	e8 e3       	ldi	r30, 0x38	; 56
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	80 83       	st	Z, r24
    18fe:	09 c0       	rjmp	.+18     	; 0x1912 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1900:	e5 e3       	ldi	r30, 0x35	; 53
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	80 83       	st	Z, r24
    1908:	04 c0       	rjmp	.+8      	; 0x1912 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    190a:	e2 e3       	ldi	r30, 0x32	; 50
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	80 83       	st	Z, r24
			break;
		}
	}
}
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	cf 91       	pop	r28
    191c:	df 91       	pop	r29
    191e:	08 95       	ret

00001920 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1920:	df 93       	push	r29
    1922:	cf 93       	push	r28
    1924:	00 d0       	rcall	.+0      	; 0x1926 <GPIO_readPort+0x6>
    1926:	00 d0       	rcall	.+0      	; 0x1928 <GPIO_readPort+0x8>
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
    192c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    192e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	84 30       	cpi	r24, 0x04	; 4
    1934:	90 f5       	brcc	.+100    	; 0x199a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	3c 83       	std	Y+4, r19	; 0x04
    193e:	2b 83       	std	Y+3, r18	; 0x03
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	81 30       	cpi	r24, 0x01	; 1
    1946:	91 05       	cpc	r25, r1
    1948:	d1 f0       	breq	.+52     	; 0x197e <GPIO_readPort+0x5e>
    194a:	2b 81       	ldd	r18, Y+3	; 0x03
    194c:	3c 81       	ldd	r19, Y+4	; 0x04
    194e:	22 30       	cpi	r18, 0x02	; 2
    1950:	31 05       	cpc	r19, r1
    1952:	2c f4       	brge	.+10     	; 0x195e <GPIO_readPort+0x3e>
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	00 97       	sbiw	r24, 0x00	; 0
    195a:	61 f0       	breq	.+24     	; 0x1974 <GPIO_readPort+0x54>
    195c:	1e c0       	rjmp	.+60     	; 0x199a <GPIO_readPort+0x7a>
    195e:	2b 81       	ldd	r18, Y+3	; 0x03
    1960:	3c 81       	ldd	r19, Y+4	; 0x04
    1962:	22 30       	cpi	r18, 0x02	; 2
    1964:	31 05       	cpc	r19, r1
    1966:	81 f0       	breq	.+32     	; 0x1988 <GPIO_readPort+0x68>
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	83 30       	cpi	r24, 0x03	; 3
    196e:	91 05       	cpc	r25, r1
    1970:	81 f0       	breq	.+32     	; 0x1992 <GPIO_readPort+0x72>
    1972:	13 c0       	rjmp	.+38     	; 0x199a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1974:	e9 e3       	ldi	r30, 0x39	; 57
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	0e c0       	rjmp	.+28     	; 0x199a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    197e:	e6 e3       	ldi	r30, 0x36	; 54
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	09 c0       	rjmp	.+18     	; 0x199a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1988:	e3 e3       	ldi	r30, 0x33	; 51
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	04 c0       	rjmp	.+8      	; 0x199a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1992:	e0 e3       	ldi	r30, 0x30	; 48
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    199a:	89 81       	ldd	r24, Y+1	; 0x01
}
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <KEYPAD_getPressedKey+0x6>
    19b0:	0f 92       	push	r0
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    19b6:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    19b8:	1b 82       	std	Y+3, r1	; 0x03
    19ba:	43 c0       	rjmp	.+134    	; 0x1a42 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	60 e0       	ldi	r22, 0x00	; 0
    19c0:	0e 94 08 0c 	call	0x1810	; 0x1810 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	98 2f       	mov	r25, r24
    19c8:	9c 5f       	subi	r25, 0xFC	; 252
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	69 2f       	mov	r22, r25
    19ce:	41 e0       	ldi	r20, 0x01	; 1
    19d0:	0e 94 97 09 	call	0x132e	; 0x132e <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	88 2f       	mov	r24, r24
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	9c 01       	movw	r18, r24
    19dc:	2c 5f       	subi	r18, 0xFC	; 252
    19de:	3f 4f       	sbci	r19, 0xFF	; 255
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <KEYPAD_getPressedKey+0x40>
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	2a 95       	dec	r18
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <KEYPAD_getPressedKey+0x3c>
    19ee:	80 95       	com	r24
    19f0:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	69 81       	ldd	r22, Y+1	; 0x01
    19f6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    19fa:	1a 82       	std	Y+2, r1	; 0x02
    19fc:	1c c0       	rjmp	.+56     	; 0x1a36 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	6a 81       	ldd	r22, Y+2	; 0x02
    1a02:	0e 94 6d 0b 	call	0x16da	; 0x16da <GPIO_readPin>
    1a06:	88 23       	and	r24, r24
    1a08:	99 f4       	brne	.+38     	; 0x1a30 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	88 2f       	mov	r24, r24
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	88 0f       	add	r24, r24
    1a12:	99 1f       	adc	r25, r25
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	98 2f       	mov	r25, r24
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	89 0f       	add	r24, r25
    1a1e:	8f 5f       	subi	r24, 0xFF	; 255
    1a20:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	8f 5f       	subi	r24, 0xFF	; 255
    1a34:	8a 83       	std	Y+2, r24	; 0x02
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	84 30       	cpi	r24, 0x04	; 4
    1a3a:	08 f3       	brcs	.-62     	; 0x19fe <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	8f 5f       	subi	r24, 0xFF	; 255
    1a40:	8b 83       	std	Y+3, r24	; 0x03
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	84 30       	cpi	r24, 0x04	; 4
    1a46:	08 f4       	brcc	.+2      	; 0x1a4a <KEYPAD_getPressedKey+0xa0>
    1a48:	b9 cf       	rjmp	.-142    	; 0x19bc <KEYPAD_getPressedKey+0x12>
    1a4a:	b6 cf       	rjmp	.-148    	; 0x19b8 <KEYPAD_getPressedKey+0xe>

00001a4c <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1a5a:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	3c 83       	std	Y+4, r19	; 0x04
    1a64:	2b 83       	std	Y+3, r18	; 0x03
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	88 30       	cpi	r24, 0x08	; 8
    1a6c:	91 05       	cpc	r25, r1
    1a6e:	09 f4       	brne	.+2      	; 0x1a72 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1a70:	70 c0       	rjmp	.+224    	; 0x1b52 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1a72:	2b 81       	ldd	r18, Y+3	; 0x03
    1a74:	3c 81       	ldd	r19, Y+4	; 0x04
    1a76:	29 30       	cpi	r18, 0x09	; 9
    1a78:	31 05       	cpc	r19, r1
    1a7a:	5c f5       	brge	.+86     	; 0x1ad2 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a80:	84 30       	cpi	r24, 0x04	; 4
    1a82:	91 05       	cpc	r25, r1
    1a84:	09 f4       	brne	.+2      	; 0x1a88 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1a86:	59 c0       	rjmp	.+178    	; 0x1b3a <KEYPAD_4x4_adjustKeyNumber+0xee>
    1a88:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8c:	25 30       	cpi	r18, 0x05	; 5
    1a8e:	31 05       	cpc	r19, r1
    1a90:	9c f4       	brge	.+38     	; 0x1ab8 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	9c 81       	ldd	r25, Y+4	; 0x04
    1a96:	82 30       	cpi	r24, 0x02	; 2
    1a98:	91 05       	cpc	r25, r1
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <KEYPAD_4x4_adjustKeyNumber+0x52>
    1a9c:	48 c0       	rjmp	.+144    	; 0x1b2e <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1a9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa0:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa2:	23 30       	cpi	r18, 0x03	; 3
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	0c f0       	brlt	.+2      	; 0x1aaa <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1aa8:	45 c0       	rjmp	.+138    	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	9c 81       	ldd	r25, Y+4	; 0x04
    1aae:	81 30       	cpi	r24, 0x01	; 1
    1ab0:	91 05       	cpc	r25, r1
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1ab4:	39 c0       	rjmp	.+114    	; 0x1b28 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1ab6:	67 c0       	rjmp	.+206    	; 0x1b86 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1ab8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aba:	3c 81       	ldd	r19, Y+4	; 0x04
    1abc:	26 30       	cpi	r18, 0x06	; 6
    1abe:	31 05       	cpc	r19, r1
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1ac2:	41 c0       	rjmp	.+130    	; 0x1b46 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac8:	87 30       	cpi	r24, 0x07	; 7
    1aca:	91 05       	cpc	r25, r1
    1acc:	0c f0       	brlt	.+2      	; 0x1ad0 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1ace:	3e c0       	rjmp	.+124    	; 0x1b4c <KEYPAD_4x4_adjustKeyNumber+0x100>
    1ad0:	37 c0       	rjmp	.+110    	; 0x1b40 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1ad2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad6:	2c 30       	cpi	r18, 0x0C	; 12
    1ad8:	31 05       	cpc	r19, r1
    1ada:	09 f4       	brne	.+2      	; 0x1ade <KEYPAD_4x4_adjustKeyNumber+0x92>
    1adc:	46 c0       	rjmp	.+140    	; 0x1b6a <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	8d 30       	cpi	r24, 0x0D	; 13
    1ae4:	91 05       	cpc	r25, r1
    1ae6:	5c f4       	brge	.+22     	; 0x1afe <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1ae8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aea:	3c 81       	ldd	r19, Y+4	; 0x04
    1aec:	2a 30       	cpi	r18, 0x0A	; 10
    1aee:	31 05       	cpc	r19, r1
    1af0:	b1 f1       	breq	.+108    	; 0x1b5e <KEYPAD_4x4_adjustKeyNumber+0x112>
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	9c 81       	ldd	r25, Y+4	; 0x04
    1af6:	8b 30       	cpi	r24, 0x0B	; 11
    1af8:	91 05       	cpc	r25, r1
    1afa:	a4 f5       	brge	.+104    	; 0x1b64 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1afc:	2d c0       	rjmp	.+90     	; 0x1b58 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1afe:	2b 81       	ldd	r18, Y+3	; 0x03
    1b00:	3c 81       	ldd	r19, Y+4	; 0x04
    1b02:	2e 30       	cpi	r18, 0x0E	; 14
    1b04:	31 05       	cpc	r19, r1
    1b06:	b9 f1       	breq	.+110    	; 0x1b76 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	8e 30       	cpi	r24, 0x0E	; 14
    1b0e:	91 05       	cpc	r25, r1
    1b10:	7c f1       	brlt	.+94     	; 0x1b70 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1b12:	2b 81       	ldd	r18, Y+3	; 0x03
    1b14:	3c 81       	ldd	r19, Y+4	; 0x04
    1b16:	2f 30       	cpi	r18, 0x0F	; 15
    1b18:	31 05       	cpc	r19, r1
    1b1a:	79 f1       	breq	.+94     	; 0x1b7a <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	80 31       	cpi	r24, 0x10	; 16
    1b22:	91 05       	cpc	r25, r1
    1b24:	69 f1       	breq	.+90     	; 0x1b80 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1b26:	2f c0       	rjmp	.+94     	; 0x1b86 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1b28:	87 e0       	ldi	r24, 0x07	; 7
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	2e c0       	rjmp	.+92     	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1b2e:	88 e0       	ldi	r24, 0x08	; 8
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	2b c0       	rjmp	.+86     	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1b34:	89 e0       	ldi	r24, 0x09	; 9
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	28 c0       	rjmp	.+80     	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1b3a:	85 e2       	ldi	r24, 0x25	; 37
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	25 c0       	rjmp	.+74     	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1b40:	84 e0       	ldi	r24, 0x04	; 4
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	22 c0       	rjmp	.+68     	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1b46:	85 e0       	ldi	r24, 0x05	; 5
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	1f c0       	rjmp	.+62     	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1b4c:	86 e0       	ldi	r24, 0x06	; 6
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	1c c0       	rjmp	.+56     	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1b52:	8a e2       	ldi	r24, 0x2A	; 42
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	19 c0       	rjmp	.+50     	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	16 c0       	rjmp	.+44     	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1b5e:	82 e0       	ldi	r24, 0x02	; 2
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	13 c0       	rjmp	.+38     	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1b64:	83 e0       	ldi	r24, 0x03	; 3
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	10 c0       	rjmp	.+32     	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1b6a:	8d e2       	ldi	r24, 0x2D	; 45
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	0d c0       	rjmp	.+26     	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1b70:	8d e0       	ldi	r24, 0x0D	; 13
    1b72:	89 83       	std	Y+1, r24	; 0x01
    1b74:	0a c0       	rjmp	.+20     	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1b76:	19 82       	std	Y+1, r1	; 0x01
    1b78:	08 c0       	rjmp	.+16     	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1b7a:	8d e3       	ldi	r24, 0x3D	; 61
    1b7c:	89 83       	std	Y+1, r24	; 0x01
    1b7e:	05 c0       	rjmp	.+10     	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1b80:	8b e2       	ldi	r24, 0x2B	; 43
    1b82:	89 83       	std	Y+1, r24	; 0x01
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	cf 91       	pop	r28
    1b96:	df 91       	pop	r29
    1b98:	08 95       	ret

00001b9a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b9a:	df 93       	push	r29
    1b9c:	cf 93       	push	r28
    1b9e:	cd b7       	in	r28, 0x3d	; 61
    1ba0:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	60 e0       	ldi	r22, 0x00	; 0
    1ba6:	41 e0       	ldi	r20, 0x01	; 1
    1ba8:	0e 94 97 09 	call	0x132e	; 0x132e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	61 e0       	ldi	r22, 0x01	; 1
    1bb0:	41 e0       	ldi	r20, 0x01	; 1
    1bb2:	0e 94 97 09 	call	0x132e	; 0x132e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	62 e0       	ldi	r22, 0x02	; 2
    1bba:	41 e0       	ldi	r20, 0x01	; 1
    1bbc:	0e 94 97 09 	call	0x132e	; 0x132e <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1bc0:	82 e0       	ldi	r24, 0x02	; 2
    1bc2:	6f ef       	ldi	r22, 0xFF	; 255
    1bc4:	0e 94 08 0c 	call	0x1810	; 0x1810 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1bc8:	88 e3       	ldi	r24, 0x38	; 56
    1bca:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1bce:	8c e0       	ldi	r24, 0x0C	; 12
    1bd0:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LCD_sendCommand>
}
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	e9 97       	sbiw	r28, 0x39	; 57
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61
    1bf4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	40 e0       	ldi	r20, 0x00	; 0
    1bfc:	0e 94 82 0a 	call	0x1504	; 0x1504 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	61 e0       	ldi	r22, 0x01	; 1
    1c04:	40 e0       	ldi	r20, 0x00	; 0
    1c06:	0e 94 82 0a 	call	0x1504	; 0x1504 <GPIO_writePin>
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	a0 e8       	ldi	r26, 0x80	; 128
    1c10:	bf e3       	ldi	r27, 0x3F	; 63
    1c12:	8d ab       	std	Y+53, r24	; 0x35
    1c14:	9e ab       	std	Y+54, r25	; 0x36
    1c16:	af ab       	std	Y+55, r26	; 0x37
    1c18:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c1c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c1e:	8f a9       	ldd	r24, Y+55	; 0x37
    1c20:	98 ad       	ldd	r25, Y+56	; 0x38
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	4a e7       	ldi	r20, 0x7A	; 122
    1c28:	53 e4       	ldi	r21, 0x43	; 67
    1c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	89 ab       	std	Y+49, r24	; 0x31
    1c34:	9a ab       	std	Y+50, r25	; 0x32
    1c36:	ab ab       	std	Y+51, r26	; 0x33
    1c38:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c3a:	69 a9       	ldd	r22, Y+49	; 0x31
    1c3c:	7a a9       	ldd	r23, Y+50	; 0x32
    1c3e:	8b a9       	ldd	r24, Y+51	; 0x33
    1c40:	9c a9       	ldd	r25, Y+52	; 0x34
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e8       	ldi	r20, 0x80	; 128
    1c48:	5f e3       	ldi	r21, 0x3F	; 63
    1c4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c4e:	88 23       	and	r24, r24
    1c50:	2c f4       	brge	.+10     	; 0x1c5c <LCD_sendCommand+0x7c>
		__ticks = 1;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	98 ab       	std	Y+48, r25	; 0x30
    1c58:	8f a7       	std	Y+47, r24	; 0x2f
    1c5a:	3f c0       	rjmp	.+126    	; 0x1cda <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1c5c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c5e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c60:	8b a9       	ldd	r24, Y+51	; 0x33
    1c62:	9c a9       	ldd	r25, Y+52	; 0x34
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	3f ef       	ldi	r19, 0xFF	; 255
    1c68:	4f e7       	ldi	r20, 0x7F	; 127
    1c6a:	57 e4       	ldi	r21, 0x47	; 71
    1c6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c70:	18 16       	cp	r1, r24
    1c72:	4c f5       	brge	.+82     	; 0x1cc6 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c74:	6d a9       	ldd	r22, Y+53	; 0x35
    1c76:	7e a9       	ldd	r23, Y+54	; 0x36
    1c78:	8f a9       	ldd	r24, Y+55	; 0x37
    1c7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e2       	ldi	r20, 0x20	; 32
    1c82:	51 e4       	ldi	r21, 0x41	; 65
    1c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	cd 01       	movw	r24, r26
    1c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	98 ab       	std	Y+48, r25	; 0x30
    1c9a:	8f a7       	std	Y+47, r24	; 0x2f
    1c9c:	0f c0       	rjmp	.+30     	; 0x1cbc <LCD_sendCommand+0xdc>
    1c9e:	89 e1       	ldi	r24, 0x19	; 25
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	9e a7       	std	Y+46, r25	; 0x2e
    1ca4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ca6:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ca8:	9e a5       	ldd	r25, Y+46	; 0x2e
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <LCD_sendCommand+0xca>
    1cae:	9e a7       	std	Y+46, r25	; 0x2e
    1cb0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb4:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	98 ab       	std	Y+48, r25	; 0x30
    1cba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cbe:	98 a9       	ldd	r25, Y+48	; 0x30
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	69 f7       	brne	.-38     	; 0x1c9e <LCD_sendCommand+0xbe>
    1cc4:	14 c0       	rjmp	.+40     	; 0x1cee <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc6:	69 a9       	ldd	r22, Y+49	; 0x31
    1cc8:	7a a9       	ldd	r23, Y+50	; 0x32
    1cca:	8b a9       	ldd	r24, Y+51	; 0x33
    1ccc:	9c a9       	ldd	r25, Y+52	; 0x34
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	98 ab       	std	Y+48, r25	; 0x30
    1cd8:	8f a7       	std	Y+47, r24	; 0x2f
    1cda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cdc:	98 a9       	ldd	r25, Y+48	; 0x30
    1cde:	9c a7       	std	Y+44, r25	; 0x2c
    1ce0:	8b a7       	std	Y+43, r24	; 0x2b
    1ce2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ce4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <LCD_sendCommand+0x106>
    1cea:	9c a7       	std	Y+44, r25	; 0x2c
    1cec:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	62 e0       	ldi	r22, 0x02	; 2
    1cf2:	41 e0       	ldi	r20, 0x01	; 1
    1cf4:	0e 94 82 0a 	call	0x1504	; 0x1504 <GPIO_writePin>
    1cf8:	80 e0       	ldi	r24, 0x00	; 0
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	a0 e8       	ldi	r26, 0x80	; 128
    1cfe:	bf e3       	ldi	r27, 0x3F	; 63
    1d00:	8f a3       	std	Y+39, r24	; 0x27
    1d02:	98 a7       	std	Y+40, r25	; 0x28
    1d04:	a9 a7       	std	Y+41, r26	; 0x29
    1d06:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d08:	6f a1       	ldd	r22, Y+39	; 0x27
    1d0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	4a e7       	ldi	r20, 0x7A	; 122
    1d16:	53 e4       	ldi	r21, 0x43	; 67
    1d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1c:	dc 01       	movw	r26, r24
    1d1e:	cb 01       	movw	r24, r22
    1d20:	8b a3       	std	Y+35, r24	; 0x23
    1d22:	9c a3       	std	Y+36, r25	; 0x24
    1d24:	ad a3       	std	Y+37, r26	; 0x25
    1d26:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d28:	6b a1       	ldd	r22, Y+35	; 0x23
    1d2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1d2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1d2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e8       	ldi	r20, 0x80	; 128
    1d36:	5f e3       	ldi	r21, 0x3F	; 63
    1d38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d3c:	88 23       	and	r24, r24
    1d3e:	2c f4       	brge	.+10     	; 0x1d4a <LCD_sendCommand+0x16a>
		__ticks = 1;
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	9a a3       	std	Y+34, r25	; 0x22
    1d46:	89 a3       	std	Y+33, r24	; 0x21
    1d48:	3f c0       	rjmp	.+126    	; 0x1dc8 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1d4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d50:	9e a1       	ldd	r25, Y+38	; 0x26
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	3f ef       	ldi	r19, 0xFF	; 255
    1d56:	4f e7       	ldi	r20, 0x7F	; 127
    1d58:	57 e4       	ldi	r21, 0x47	; 71
    1d5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d5e:	18 16       	cp	r1, r24
    1d60:	4c f5       	brge	.+82     	; 0x1db4 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d62:	6f a1       	ldd	r22, Y+39	; 0x27
    1d64:	78 a5       	ldd	r23, Y+40	; 0x28
    1d66:	89 a5       	ldd	r24, Y+41	; 0x29
    1d68:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	40 e2       	ldi	r20, 0x20	; 32
    1d70:	51 e4       	ldi	r21, 0x41	; 65
    1d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	bc 01       	movw	r22, r24
    1d7c:	cd 01       	movw	r24, r26
    1d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d82:	dc 01       	movw	r26, r24
    1d84:	cb 01       	movw	r24, r22
    1d86:	9a a3       	std	Y+34, r25	; 0x22
    1d88:	89 a3       	std	Y+33, r24	; 0x21
    1d8a:	0f c0       	rjmp	.+30     	; 0x1daa <LCD_sendCommand+0x1ca>
    1d8c:	89 e1       	ldi	r24, 0x19	; 25
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	98 a3       	std	Y+32, r25	; 0x20
    1d92:	8f 8f       	std	Y+31, r24	; 0x1f
    1d94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d96:	98 a1       	ldd	r25, Y+32	; 0x20
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	f1 f7       	brne	.-4      	; 0x1d98 <LCD_sendCommand+0x1b8>
    1d9c:	98 a3       	std	Y+32, r25	; 0x20
    1d9e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da0:	89 a1       	ldd	r24, Y+33	; 0x21
    1da2:	9a a1       	ldd	r25, Y+34	; 0x22
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	9a a3       	std	Y+34, r25	; 0x22
    1da8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1daa:	89 a1       	ldd	r24, Y+33	; 0x21
    1dac:	9a a1       	ldd	r25, Y+34	; 0x22
    1dae:	00 97       	sbiw	r24, 0x00	; 0
    1db0:	69 f7       	brne	.-38     	; 0x1d8c <LCD_sendCommand+0x1ac>
    1db2:	14 c0       	rjmp	.+40     	; 0x1ddc <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db4:	6b a1       	ldd	r22, Y+35	; 0x23
    1db6:	7c a1       	ldd	r23, Y+36	; 0x24
    1db8:	8d a1       	ldd	r24, Y+37	; 0x25
    1dba:	9e a1       	ldd	r25, Y+38	; 0x26
    1dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	9a a3       	std	Y+34, r25	; 0x22
    1dc6:	89 a3       	std	Y+33, r24	; 0x21
    1dc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1dca:	9a a1       	ldd	r25, Y+34	; 0x22
    1dcc:	9e 8f       	std	Y+30, r25	; 0x1e
    1dce:	8d 8f       	std	Y+29, r24	; 0x1d
    1dd0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dd2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	f1 f7       	brne	.-4      	; 0x1dd4 <LCD_sendCommand+0x1f4>
    1dd8:	9e 8f       	std	Y+30, r25	; 0x1e
    1dda:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1ddc:	82 e0       	ldi	r24, 0x02	; 2
    1dde:	69 ad       	ldd	r22, Y+57	; 0x39
    1de0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <GPIO_writePort>
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	a0 e8       	ldi	r26, 0x80	; 128
    1dea:	bf e3       	ldi	r27, 0x3F	; 63
    1dec:	89 8f       	std	Y+25, r24	; 0x19
    1dee:	9a 8f       	std	Y+26, r25	; 0x1a
    1df0:	ab 8f       	std	Y+27, r26	; 0x1b
    1df2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1df4:	69 8d       	ldd	r22, Y+25	; 0x19
    1df6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1df8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	4a e7       	ldi	r20, 0x7A	; 122
    1e02:	53 e4       	ldi	r21, 0x43	; 67
    1e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	8d 8b       	std	Y+21, r24	; 0x15
    1e0e:	9e 8b       	std	Y+22, r25	; 0x16
    1e10:	af 8b       	std	Y+23, r26	; 0x17
    1e12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e14:	6d 89       	ldd	r22, Y+21	; 0x15
    1e16:	7e 89       	ldd	r23, Y+22	; 0x16
    1e18:	8f 89       	ldd	r24, Y+23	; 0x17
    1e1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e8       	ldi	r20, 0x80	; 128
    1e22:	5f e3       	ldi	r21, 0x3F	; 63
    1e24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e28:	88 23       	and	r24, r24
    1e2a:	2c f4       	brge	.+10     	; 0x1e36 <LCD_sendCommand+0x256>
		__ticks = 1;
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	9c 8b       	std	Y+20, r25	; 0x14
    1e32:	8b 8b       	std	Y+19, r24	; 0x13
    1e34:	3f c0       	rjmp	.+126    	; 0x1eb4 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1e36:	6d 89       	ldd	r22, Y+21	; 0x15
    1e38:	7e 89       	ldd	r23, Y+22	; 0x16
    1e3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	3f ef       	ldi	r19, 0xFF	; 255
    1e42:	4f e7       	ldi	r20, 0x7F	; 127
    1e44:	57 e4       	ldi	r21, 0x47	; 71
    1e46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e4a:	18 16       	cp	r1, r24
    1e4c:	4c f5       	brge	.+82     	; 0x1ea0 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e2       	ldi	r20, 0x20	; 32
    1e5c:	51 e4       	ldi	r21, 0x41	; 65
    1e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	bc 01       	movw	r22, r24
    1e68:	cd 01       	movw	r24, r26
    1e6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	9c 8b       	std	Y+20, r25	; 0x14
    1e74:	8b 8b       	std	Y+19, r24	; 0x13
    1e76:	0f c0       	rjmp	.+30     	; 0x1e96 <LCD_sendCommand+0x2b6>
    1e78:	89 e1       	ldi	r24, 0x19	; 25
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	9a 8b       	std	Y+18, r25	; 0x12
    1e7e:	89 8b       	std	Y+17, r24	; 0x11
    1e80:	89 89       	ldd	r24, Y+17	; 0x11
    1e82:	9a 89       	ldd	r25, Y+18	; 0x12
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	f1 f7       	brne	.-4      	; 0x1e84 <LCD_sendCommand+0x2a4>
    1e88:	9a 8b       	std	Y+18, r25	; 0x12
    1e8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	9c 8b       	std	Y+20, r25	; 0x14
    1e94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e96:	8b 89       	ldd	r24, Y+19	; 0x13
    1e98:	9c 89       	ldd	r25, Y+20	; 0x14
    1e9a:	00 97       	sbiw	r24, 0x00	; 0
    1e9c:	69 f7       	brne	.-38     	; 0x1e78 <LCD_sendCommand+0x298>
    1e9e:	14 c0       	rjmp	.+40     	; 0x1ec8 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ea8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	9c 8b       	std	Y+20, r25	; 0x14
    1eb2:	8b 8b       	std	Y+19, r24	; 0x13
    1eb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb8:	98 8b       	std	Y+16, r25	; 0x10
    1eba:	8f 87       	std	Y+15, r24	; 0x0f
    1ebc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ebe:	98 89       	ldd	r25, Y+16	; 0x10
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <LCD_sendCommand+0x2e0>
    1ec4:	98 8b       	std	Y+16, r25	; 0x10
    1ec6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	62 e0       	ldi	r22, 0x02	; 2
    1ecc:	40 e0       	ldi	r20, 0x00	; 0
    1ece:	0e 94 82 0a 	call	0x1504	; 0x1504 <GPIO_writePin>
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	a0 e8       	ldi	r26, 0x80	; 128
    1ed8:	bf e3       	ldi	r27, 0x3F	; 63
    1eda:	8b 87       	std	Y+11, r24	; 0x0b
    1edc:	9c 87       	std	Y+12, r25	; 0x0c
    1ede:	ad 87       	std	Y+13, r26	; 0x0d
    1ee0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	4a e7       	ldi	r20, 0x7A	; 122
    1ef0:	53 e4       	ldi	r21, 0x43	; 67
    1ef2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef6:	dc 01       	movw	r26, r24
    1ef8:	cb 01       	movw	r24, r22
    1efa:	8f 83       	std	Y+7, r24	; 0x07
    1efc:	98 87       	std	Y+8, r25	; 0x08
    1efe:	a9 87       	std	Y+9, r26	; 0x09
    1f00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f02:	6f 81       	ldd	r22, Y+7	; 0x07
    1f04:	78 85       	ldd	r23, Y+8	; 0x08
    1f06:	89 85       	ldd	r24, Y+9	; 0x09
    1f08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e8       	ldi	r20, 0x80	; 128
    1f10:	5f e3       	ldi	r21, 0x3F	; 63
    1f12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f16:	88 23       	and	r24, r24
    1f18:	2c f4       	brge	.+10     	; 0x1f24 <LCD_sendCommand+0x344>
		__ticks = 1;
    1f1a:	81 e0       	ldi	r24, 0x01	; 1
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	9e 83       	std	Y+6, r25	; 0x06
    1f20:	8d 83       	std	Y+5, r24	; 0x05
    1f22:	3f c0       	rjmp	.+126    	; 0x1fa2 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1f24:	6f 81       	ldd	r22, Y+7	; 0x07
    1f26:	78 85       	ldd	r23, Y+8	; 0x08
    1f28:	89 85       	ldd	r24, Y+9	; 0x09
    1f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	3f ef       	ldi	r19, 0xFF	; 255
    1f30:	4f e7       	ldi	r20, 0x7F	; 127
    1f32:	57 e4       	ldi	r21, 0x47	; 71
    1f34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f38:	18 16       	cp	r1, r24
    1f3a:	4c f5       	brge	.+82     	; 0x1f8e <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e2       	ldi	r20, 0x20	; 32
    1f4a:	51 e4       	ldi	r21, 0x41	; 65
    1f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	bc 01       	movw	r22, r24
    1f56:	cd 01       	movw	r24, r26
    1f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
    1f64:	0f c0       	rjmp	.+30     	; 0x1f84 <LCD_sendCommand+0x3a4>
    1f66:	89 e1       	ldi	r24, 0x19	; 25
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	9c 83       	std	Y+4, r25	; 0x04
    1f6c:	8b 83       	std	Y+3, r24	; 0x03
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	f1 f7       	brne	.-4      	; 0x1f72 <LCD_sendCommand+0x392>
    1f76:	9c 83       	std	Y+4, r25	; 0x04
    1f78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	9e 83       	std	Y+6, r25	; 0x06
    1f82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	9e 81       	ldd	r25, Y+6	; 0x06
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	69 f7       	brne	.-38     	; 0x1f66 <LCD_sendCommand+0x386>
    1f8c:	14 c0       	rjmp	.+40     	; 0x1fb6 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f90:	78 85       	ldd	r23, Y+8	; 0x08
    1f92:	89 85       	ldd	r24, Y+9	; 0x09
    1f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
    1fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <LCD_sendCommand+0x3ce>
    1fb2:	9a 83       	std	Y+2, r25	; 0x02
    1fb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1fb6:	e9 96       	adiw	r28, 0x39	; 57
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	f8 94       	cli
    1fbc:	de bf       	out	0x3e, r29	; 62
    1fbe:	0f be       	out	0x3f, r0	; 63
    1fc0:	cd bf       	out	0x3d, r28	; 61
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	cd b7       	in	r28, 0x3d	; 61
    1fce:	de b7       	in	r29, 0x3e	; 62
    1fd0:	e9 97       	sbiw	r28, 0x39	; 57
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1fde:	80 e0       	ldi	r24, 0x00	; 0
    1fe0:	60 e0       	ldi	r22, 0x00	; 0
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	0e 94 82 0a 	call	0x1504	; 0x1504 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1fe8:	80 e0       	ldi	r24, 0x00	; 0
    1fea:	61 e0       	ldi	r22, 0x01	; 1
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	0e 94 82 0a 	call	0x1504	; 0x1504 <GPIO_writePin>
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	a0 e8       	ldi	r26, 0x80	; 128
    1ff8:	bf e3       	ldi	r27, 0x3F	; 63
    1ffa:	8d ab       	std	Y+53, r24	; 0x35
    1ffc:	9e ab       	std	Y+54, r25	; 0x36
    1ffe:	af ab       	std	Y+55, r26	; 0x37
    2000:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2002:	6d a9       	ldd	r22, Y+53	; 0x35
    2004:	7e a9       	ldd	r23, Y+54	; 0x36
    2006:	8f a9       	ldd	r24, Y+55	; 0x37
    2008:	98 ad       	ldd	r25, Y+56	; 0x38
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	4a e7       	ldi	r20, 0x7A	; 122
    2010:	53 e4       	ldi	r21, 0x43	; 67
    2012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	89 ab       	std	Y+49, r24	; 0x31
    201c:	9a ab       	std	Y+50, r25	; 0x32
    201e:	ab ab       	std	Y+51, r26	; 0x33
    2020:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2022:	69 a9       	ldd	r22, Y+49	; 0x31
    2024:	7a a9       	ldd	r23, Y+50	; 0x32
    2026:	8b a9       	ldd	r24, Y+51	; 0x33
    2028:	9c a9       	ldd	r25, Y+52	; 0x34
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e8       	ldi	r20, 0x80	; 128
    2030:	5f e3       	ldi	r21, 0x3F	; 63
    2032:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2036:	88 23       	and	r24, r24
    2038:	2c f4       	brge	.+10     	; 0x2044 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	98 ab       	std	Y+48, r25	; 0x30
    2040:	8f a7       	std	Y+47, r24	; 0x2f
    2042:	3f c0       	rjmp	.+126    	; 0x20c2 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2044:	69 a9       	ldd	r22, Y+49	; 0x31
    2046:	7a a9       	ldd	r23, Y+50	; 0x32
    2048:	8b a9       	ldd	r24, Y+51	; 0x33
    204a:	9c a9       	ldd	r25, Y+52	; 0x34
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	3f ef       	ldi	r19, 0xFF	; 255
    2050:	4f e7       	ldi	r20, 0x7F	; 127
    2052:	57 e4       	ldi	r21, 0x47	; 71
    2054:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2058:	18 16       	cp	r1, r24
    205a:	4c f5       	brge	.+82     	; 0x20ae <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205c:	6d a9       	ldd	r22, Y+53	; 0x35
    205e:	7e a9       	ldd	r23, Y+54	; 0x36
    2060:	8f a9       	ldd	r24, Y+55	; 0x37
    2062:	98 ad       	ldd	r25, Y+56	; 0x38
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e2       	ldi	r20, 0x20	; 32
    206a:	51 e4       	ldi	r21, 0x41	; 65
    206c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	bc 01       	movw	r22, r24
    2076:	cd 01       	movw	r24, r26
    2078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	98 ab       	std	Y+48, r25	; 0x30
    2082:	8f a7       	std	Y+47, r24	; 0x2f
    2084:	0f c0       	rjmp	.+30     	; 0x20a4 <LCD_displayCharacter+0xdc>
    2086:	89 e1       	ldi	r24, 0x19	; 25
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	9e a7       	std	Y+46, r25	; 0x2e
    208c:	8d a7       	std	Y+45, r24	; 0x2d
    208e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2090:	9e a5       	ldd	r25, Y+46	; 0x2e
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	f1 f7       	brne	.-4      	; 0x2092 <LCD_displayCharacter+0xca>
    2096:	9e a7       	std	Y+46, r25	; 0x2e
    2098:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209a:	8f a5       	ldd	r24, Y+47	; 0x2f
    209c:	98 a9       	ldd	r25, Y+48	; 0x30
    209e:	01 97       	sbiw	r24, 0x01	; 1
    20a0:	98 ab       	std	Y+48, r25	; 0x30
    20a2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20a6:	98 a9       	ldd	r25, Y+48	; 0x30
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	69 f7       	brne	.-38     	; 0x2086 <LCD_displayCharacter+0xbe>
    20ac:	14 c0       	rjmp	.+40     	; 0x20d6 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ae:	69 a9       	ldd	r22, Y+49	; 0x31
    20b0:	7a a9       	ldd	r23, Y+50	; 0x32
    20b2:	8b a9       	ldd	r24, Y+51	; 0x33
    20b4:	9c a9       	ldd	r25, Y+52	; 0x34
    20b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	98 ab       	std	Y+48, r25	; 0x30
    20c0:	8f a7       	std	Y+47, r24	; 0x2f
    20c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c4:	98 a9       	ldd	r25, Y+48	; 0x30
    20c6:	9c a7       	std	Y+44, r25	; 0x2c
    20c8:	8b a7       	std	Y+43, r24	; 0x2b
    20ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    20cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <LCD_displayCharacter+0x106>
    20d2:	9c a7       	std	Y+44, r25	; 0x2c
    20d4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	62 e0       	ldi	r22, 0x02	; 2
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	0e 94 82 0a 	call	0x1504	; 0x1504 <GPIO_writePin>
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	a0 e8       	ldi	r26, 0x80	; 128
    20e6:	bf e3       	ldi	r27, 0x3F	; 63
    20e8:	8f a3       	std	Y+39, r24	; 0x27
    20ea:	98 a7       	std	Y+40, r25	; 0x28
    20ec:	a9 a7       	std	Y+41, r26	; 0x29
    20ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20f0:	6f a1       	ldd	r22, Y+39	; 0x27
    20f2:	78 a5       	ldd	r23, Y+40	; 0x28
    20f4:	89 a5       	ldd	r24, Y+41	; 0x29
    20f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	4a e7       	ldi	r20, 0x7A	; 122
    20fe:	53 e4       	ldi	r21, 0x43	; 67
    2100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	8b a3       	std	Y+35, r24	; 0x23
    210a:	9c a3       	std	Y+36, r25	; 0x24
    210c:	ad a3       	std	Y+37, r26	; 0x25
    210e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2110:	6b a1       	ldd	r22, Y+35	; 0x23
    2112:	7c a1       	ldd	r23, Y+36	; 0x24
    2114:	8d a1       	ldd	r24, Y+37	; 0x25
    2116:	9e a1       	ldd	r25, Y+38	; 0x26
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	40 e8       	ldi	r20, 0x80	; 128
    211e:	5f e3       	ldi	r21, 0x3F	; 63
    2120:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2124:	88 23       	and	r24, r24
    2126:	2c f4       	brge	.+10     	; 0x2132 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	9a a3       	std	Y+34, r25	; 0x22
    212e:	89 a3       	std	Y+33, r24	; 0x21
    2130:	3f c0       	rjmp	.+126    	; 0x21b0 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2132:	6b a1       	ldd	r22, Y+35	; 0x23
    2134:	7c a1       	ldd	r23, Y+36	; 0x24
    2136:	8d a1       	ldd	r24, Y+37	; 0x25
    2138:	9e a1       	ldd	r25, Y+38	; 0x26
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	3f ef       	ldi	r19, 0xFF	; 255
    213e:	4f e7       	ldi	r20, 0x7F	; 127
    2140:	57 e4       	ldi	r21, 0x47	; 71
    2142:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2146:	18 16       	cp	r1, r24
    2148:	4c f5       	brge	.+82     	; 0x219c <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    214a:	6f a1       	ldd	r22, Y+39	; 0x27
    214c:	78 a5       	ldd	r23, Y+40	; 0x28
    214e:	89 a5       	ldd	r24, Y+41	; 0x29
    2150:	9a a5       	ldd	r25, Y+42	; 0x2a
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e2       	ldi	r20, 0x20	; 32
    2158:	51 e4       	ldi	r21, 0x41	; 65
    215a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	bc 01       	movw	r22, r24
    2164:	cd 01       	movw	r24, r26
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9a a3       	std	Y+34, r25	; 0x22
    2170:	89 a3       	std	Y+33, r24	; 0x21
    2172:	0f c0       	rjmp	.+30     	; 0x2192 <LCD_displayCharacter+0x1ca>
    2174:	89 e1       	ldi	r24, 0x19	; 25
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	98 a3       	std	Y+32, r25	; 0x20
    217a:	8f 8f       	std	Y+31, r24	; 0x1f
    217c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    217e:	98 a1       	ldd	r25, Y+32	; 0x20
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	f1 f7       	brne	.-4      	; 0x2180 <LCD_displayCharacter+0x1b8>
    2184:	98 a3       	std	Y+32, r25	; 0x20
    2186:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2188:	89 a1       	ldd	r24, Y+33	; 0x21
    218a:	9a a1       	ldd	r25, Y+34	; 0x22
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	9a a3       	std	Y+34, r25	; 0x22
    2190:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2192:	89 a1       	ldd	r24, Y+33	; 0x21
    2194:	9a a1       	ldd	r25, Y+34	; 0x22
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	69 f7       	brne	.-38     	; 0x2174 <LCD_displayCharacter+0x1ac>
    219a:	14 c0       	rjmp	.+40     	; 0x21c4 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    219c:	6b a1       	ldd	r22, Y+35	; 0x23
    219e:	7c a1       	ldd	r23, Y+36	; 0x24
    21a0:	8d a1       	ldd	r24, Y+37	; 0x25
    21a2:	9e a1       	ldd	r25, Y+38	; 0x26
    21a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	9a a3       	std	Y+34, r25	; 0x22
    21ae:	89 a3       	std	Y+33, r24	; 0x21
    21b0:	89 a1       	ldd	r24, Y+33	; 0x21
    21b2:	9a a1       	ldd	r25, Y+34	; 0x22
    21b4:	9e 8f       	std	Y+30, r25	; 0x1e
    21b6:	8d 8f       	std	Y+29, r24	; 0x1d
    21b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	f1 f7       	brne	.-4      	; 0x21bc <LCD_displayCharacter+0x1f4>
    21c0:	9e 8f       	std	Y+30, r25	; 0x1e
    21c2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    21c4:	82 e0       	ldi	r24, 0x02	; 2
    21c6:	69 ad       	ldd	r22, Y+57	; 0x39
    21c8:	0e 94 4c 0c 	call	0x1898	; 0x1898 <GPIO_writePort>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	a0 e8       	ldi	r26, 0x80	; 128
    21d2:	bf e3       	ldi	r27, 0x3F	; 63
    21d4:	89 8f       	std	Y+25, r24	; 0x19
    21d6:	9a 8f       	std	Y+26, r25	; 0x1a
    21d8:	ab 8f       	std	Y+27, r26	; 0x1b
    21da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21dc:	69 8d       	ldd	r22, Y+25	; 0x19
    21de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	4a e7       	ldi	r20, 0x7A	; 122
    21ea:	53 e4       	ldi	r21, 0x43	; 67
    21ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	8d 8b       	std	Y+21, r24	; 0x15
    21f6:	9e 8b       	std	Y+22, r25	; 0x16
    21f8:	af 8b       	std	Y+23, r26	; 0x17
    21fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21fc:	6d 89       	ldd	r22, Y+21	; 0x15
    21fe:	7e 89       	ldd	r23, Y+22	; 0x16
    2200:	8f 89       	ldd	r24, Y+23	; 0x17
    2202:	98 8d       	ldd	r25, Y+24	; 0x18
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	40 e8       	ldi	r20, 0x80	; 128
    220a:	5f e3       	ldi	r21, 0x3F	; 63
    220c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2210:	88 23       	and	r24, r24
    2212:	2c f4       	brge	.+10     	; 0x221e <LCD_displayCharacter+0x256>
		__ticks = 1;
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	9c 8b       	std	Y+20, r25	; 0x14
    221a:	8b 8b       	std	Y+19, r24	; 0x13
    221c:	3f c0       	rjmp	.+126    	; 0x229c <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    221e:	6d 89       	ldd	r22, Y+21	; 0x15
    2220:	7e 89       	ldd	r23, Y+22	; 0x16
    2222:	8f 89       	ldd	r24, Y+23	; 0x17
    2224:	98 8d       	ldd	r25, Y+24	; 0x18
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	3f ef       	ldi	r19, 0xFF	; 255
    222a:	4f e7       	ldi	r20, 0x7F	; 127
    222c:	57 e4       	ldi	r21, 0x47	; 71
    222e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2232:	18 16       	cp	r1, r24
    2234:	4c f5       	brge	.+82     	; 0x2288 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2236:	69 8d       	ldd	r22, Y+25	; 0x19
    2238:	7a 8d       	ldd	r23, Y+26	; 0x1a
    223a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    223c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	40 e2       	ldi	r20, 0x20	; 32
    2244:	51 e4       	ldi	r21, 0x41	; 65
    2246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	bc 01       	movw	r22, r24
    2250:	cd 01       	movw	r24, r26
    2252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9c 8b       	std	Y+20, r25	; 0x14
    225c:	8b 8b       	std	Y+19, r24	; 0x13
    225e:	0f c0       	rjmp	.+30     	; 0x227e <LCD_displayCharacter+0x2b6>
    2260:	89 e1       	ldi	r24, 0x19	; 25
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	9a 8b       	std	Y+18, r25	; 0x12
    2266:	89 8b       	std	Y+17, r24	; 0x11
    2268:	89 89       	ldd	r24, Y+17	; 0x11
    226a:	9a 89       	ldd	r25, Y+18	; 0x12
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <LCD_displayCharacter+0x2a4>
    2270:	9a 8b       	std	Y+18, r25	; 0x12
    2272:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2274:	8b 89       	ldd	r24, Y+19	; 0x13
    2276:	9c 89       	ldd	r25, Y+20	; 0x14
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	9c 8b       	std	Y+20, r25	; 0x14
    227c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227e:	8b 89       	ldd	r24, Y+19	; 0x13
    2280:	9c 89       	ldd	r25, Y+20	; 0x14
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	69 f7       	brne	.-38     	; 0x2260 <LCD_displayCharacter+0x298>
    2286:	14 c0       	rjmp	.+40     	; 0x22b0 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2288:	6d 89       	ldd	r22, Y+21	; 0x15
    228a:	7e 89       	ldd	r23, Y+22	; 0x16
    228c:	8f 89       	ldd	r24, Y+23	; 0x17
    228e:	98 8d       	ldd	r25, Y+24	; 0x18
    2290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	9c 8b       	std	Y+20, r25	; 0x14
    229a:	8b 8b       	std	Y+19, r24	; 0x13
    229c:	8b 89       	ldd	r24, Y+19	; 0x13
    229e:	9c 89       	ldd	r25, Y+20	; 0x14
    22a0:	98 8b       	std	Y+16, r25	; 0x10
    22a2:	8f 87       	std	Y+15, r24	; 0x0f
    22a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a6:	98 89       	ldd	r25, Y+16	; 0x10
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <LCD_displayCharacter+0x2e0>
    22ac:	98 8b       	std	Y+16, r25	; 0x10
    22ae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	62 e0       	ldi	r22, 0x02	; 2
    22b4:	40 e0       	ldi	r20, 0x00	; 0
    22b6:	0e 94 82 0a 	call	0x1504	; 0x1504 <GPIO_writePin>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	a0 e8       	ldi	r26, 0x80	; 128
    22c0:	bf e3       	ldi	r27, 0x3F	; 63
    22c2:	8b 87       	std	Y+11, r24	; 0x0b
    22c4:	9c 87       	std	Y+12, r25	; 0x0c
    22c6:	ad 87       	std	Y+13, r26	; 0x0d
    22c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    22cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	4a e7       	ldi	r20, 0x7A	; 122
    22d8:	53 e4       	ldi	r21, 0x43	; 67
    22da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22de:	dc 01       	movw	r26, r24
    22e0:	cb 01       	movw	r24, r22
    22e2:	8f 83       	std	Y+7, r24	; 0x07
    22e4:	98 87       	std	Y+8, r25	; 0x08
    22e6:	a9 87       	std	Y+9, r26	; 0x09
    22e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22ea:	6f 81       	ldd	r22, Y+7	; 0x07
    22ec:	78 85       	ldd	r23, Y+8	; 0x08
    22ee:	89 85       	ldd	r24, Y+9	; 0x09
    22f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e8       	ldi	r20, 0x80	; 128
    22f8:	5f e3       	ldi	r21, 0x3F	; 63
    22fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22fe:	88 23       	and	r24, r24
    2300:	2c f4       	brge	.+10     	; 0x230c <LCD_displayCharacter+0x344>
		__ticks = 1;
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	9e 83       	std	Y+6, r25	; 0x06
    2308:	8d 83       	std	Y+5, r24	; 0x05
    230a:	3f c0       	rjmp	.+126    	; 0x238a <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    230c:	6f 81       	ldd	r22, Y+7	; 0x07
    230e:	78 85       	ldd	r23, Y+8	; 0x08
    2310:	89 85       	ldd	r24, Y+9	; 0x09
    2312:	9a 85       	ldd	r25, Y+10	; 0x0a
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	3f ef       	ldi	r19, 0xFF	; 255
    2318:	4f e7       	ldi	r20, 0x7F	; 127
    231a:	57 e4       	ldi	r21, 0x47	; 71
    231c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2320:	18 16       	cp	r1, r24
    2322:	4c f5       	brge	.+82     	; 0x2376 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2324:	6b 85       	ldd	r22, Y+11	; 0x0b
    2326:	7c 85       	ldd	r23, Y+12	; 0x0c
    2328:	8d 85       	ldd	r24, Y+13	; 0x0d
    232a:	9e 85       	ldd	r25, Y+14	; 0x0e
    232c:	20 e0       	ldi	r18, 0x00	; 0
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	40 e2       	ldi	r20, 0x20	; 32
    2332:	51 e4       	ldi	r21, 0x41	; 65
    2334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	bc 01       	movw	r22, r24
    233e:	cd 01       	movw	r24, r26
    2340:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	9e 83       	std	Y+6, r25	; 0x06
    234a:	8d 83       	std	Y+5, r24	; 0x05
    234c:	0f c0       	rjmp	.+30     	; 0x236c <LCD_displayCharacter+0x3a4>
    234e:	89 e1       	ldi	r24, 0x19	; 25
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	9c 83       	std	Y+4, r25	; 0x04
    2354:	8b 83       	std	Y+3, r24	; 0x03
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	9c 81       	ldd	r25, Y+4	; 0x04
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	f1 f7       	brne	.-4      	; 0x235a <LCD_displayCharacter+0x392>
    235e:	9c 83       	std	Y+4, r25	; 0x04
    2360:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2362:	8d 81       	ldd	r24, Y+5	; 0x05
    2364:	9e 81       	ldd	r25, Y+6	; 0x06
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9e 83       	std	Y+6, r25	; 0x06
    236a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	9e 81       	ldd	r25, Y+6	; 0x06
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	69 f7       	brne	.-38     	; 0x234e <LCD_displayCharacter+0x386>
    2374:	14 c0       	rjmp	.+40     	; 0x239e <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2376:	6f 81       	ldd	r22, Y+7	; 0x07
    2378:	78 85       	ldd	r23, Y+8	; 0x08
    237a:	89 85       	ldd	r24, Y+9	; 0x09
    237c:	9a 85       	ldd	r25, Y+10	; 0x0a
    237e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2382:	dc 01       	movw	r26, r24
    2384:	cb 01       	movw	r24, r22
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
    238a:	8d 81       	ldd	r24, Y+5	; 0x05
    238c:	9e 81       	ldd	r25, Y+6	; 0x06
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	9a 81       	ldd	r25, Y+2	; 0x02
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <LCD_displayCharacter+0x3ce>
    239a:	9a 83       	std	Y+2, r25	; 0x02
    239c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    239e:	e9 96       	adiw	r28, 0x39	; 57
    23a0:	0f b6       	in	r0, 0x3f	; 63
    23a2:	f8 94       	cli
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	0f be       	out	0x3f, r0	; 63
    23a8:	cd bf       	out	0x3d, r28	; 61
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <LCD_displayString+0x6>
    23b6:	0f 92       	push	r0
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
    23bc:	9b 83       	std	Y+3, r25	; 0x03
    23be:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23c0:	19 82       	std	Y+1, r1	; 0x01
    23c2:	0e c0       	rjmp	.+28     	; 0x23e0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	28 2f       	mov	r18, r24
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	8a 81       	ldd	r24, Y+2	; 0x02
    23cc:	9b 81       	ldd	r25, Y+3	; 0x03
    23ce:	fc 01       	movw	r30, r24
    23d0:	e2 0f       	add	r30, r18
    23d2:	f3 1f       	adc	r31, r19
    23d4:	80 81       	ld	r24, Z
    23d6:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_displayCharacter>
		i++;
    23da:	89 81       	ldd	r24, Y+1	; 0x01
    23dc:	8f 5f       	subi	r24, 0xFF	; 255
    23de:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    23e0:	89 81       	ldd	r24, Y+1	; 0x01
    23e2:	28 2f       	mov	r18, r24
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ea:	fc 01       	movw	r30, r24
    23ec:	e2 0f       	add	r30, r18
    23ee:	f3 1f       	adc	r31, r19
    23f0:	80 81       	ld	r24, Z
    23f2:	88 23       	and	r24, r24
    23f4:	39 f7       	brne	.-50     	; 0x23c4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	cf 91       	pop	r28
    23fe:	df 91       	pop	r29
    2400:	08 95       	ret

00002402 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2402:	df 93       	push	r29
    2404:	cf 93       	push	r28
    2406:	00 d0       	rcall	.+0      	; 0x2408 <LCD_moveCursor+0x6>
    2408:	00 d0       	rcall	.+0      	; 0x240a <LCD_moveCursor+0x8>
    240a:	0f 92       	push	r0
    240c:	cd b7       	in	r28, 0x3d	; 61
    240e:	de b7       	in	r29, 0x3e	; 62
    2410:	8a 83       	std	Y+2, r24	; 0x02
    2412:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	28 2f       	mov	r18, r24
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	3d 83       	std	Y+5, r19	; 0x05
    241c:	2c 83       	std	Y+4, r18	; 0x04
    241e:	8c 81       	ldd	r24, Y+4	; 0x04
    2420:	9d 81       	ldd	r25, Y+5	; 0x05
    2422:	81 30       	cpi	r24, 0x01	; 1
    2424:	91 05       	cpc	r25, r1
    2426:	c1 f0       	breq	.+48     	; 0x2458 <LCD_moveCursor+0x56>
    2428:	2c 81       	ldd	r18, Y+4	; 0x04
    242a:	3d 81       	ldd	r19, Y+5	; 0x05
    242c:	22 30       	cpi	r18, 0x02	; 2
    242e:	31 05       	cpc	r19, r1
    2430:	2c f4       	brge	.+10     	; 0x243c <LCD_moveCursor+0x3a>
    2432:	8c 81       	ldd	r24, Y+4	; 0x04
    2434:	9d 81       	ldd	r25, Y+5	; 0x05
    2436:	00 97       	sbiw	r24, 0x00	; 0
    2438:	61 f0       	breq	.+24     	; 0x2452 <LCD_moveCursor+0x50>
    243a:	19 c0       	rjmp	.+50     	; 0x246e <LCD_moveCursor+0x6c>
    243c:	2c 81       	ldd	r18, Y+4	; 0x04
    243e:	3d 81       	ldd	r19, Y+5	; 0x05
    2440:	22 30       	cpi	r18, 0x02	; 2
    2442:	31 05       	cpc	r19, r1
    2444:	69 f0       	breq	.+26     	; 0x2460 <LCD_moveCursor+0x5e>
    2446:	8c 81       	ldd	r24, Y+4	; 0x04
    2448:	9d 81       	ldd	r25, Y+5	; 0x05
    244a:	83 30       	cpi	r24, 0x03	; 3
    244c:	91 05       	cpc	r25, r1
    244e:	61 f0       	breq	.+24     	; 0x2468 <LCD_moveCursor+0x66>
    2450:	0e c0       	rjmp	.+28     	; 0x246e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	89 83       	std	Y+1, r24	; 0x01
    2456:	0b c0       	rjmp	.+22     	; 0x246e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2458:	8b 81       	ldd	r24, Y+3	; 0x03
    245a:	80 5c       	subi	r24, 0xC0	; 192
    245c:	89 83       	std	Y+1, r24	; 0x01
    245e:	07 c0       	rjmp	.+14     	; 0x246e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	80 5f       	subi	r24, 0xF0	; 240
    2464:	89 83       	std	Y+1, r24	; 0x01
    2466:	03 c0       	rjmp	.+6      	; 0x246e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2468:	8b 81       	ldd	r24, Y+3	; 0x03
    246a:	80 5b       	subi	r24, 0xB0	; 176
    246c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	80 68       	ori	r24, 0x80	; 128
    2472:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LCD_sendCommand>
}
    2476:	0f 90       	pop	r0
    2478:	0f 90       	pop	r0
    247a:	0f 90       	pop	r0
    247c:	0f 90       	pop	r0
    247e:	0f 90       	pop	r0
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	00 d0       	rcall	.+0      	; 0x248c <LCD_displayStringRowColumn+0x6>
    248c:	00 d0       	rcall	.+0      	; 0x248e <LCD_displayStringRowColumn+0x8>
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	89 83       	std	Y+1, r24	; 0x01
    2494:	6a 83       	std	Y+2, r22	; 0x02
    2496:	5c 83       	std	Y+4, r21	; 0x04
    2498:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	6a 81       	ldd	r22, Y+2	; 0x02
    249e:	0e 94 01 12 	call	0x2402	; 0x2402 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <LCD_displayString>
}
    24aa:	0f 90       	pop	r0
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	08 95       	ret

000024b8 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    24b8:	df 93       	push	r29
    24ba:	cf 93       	push	r28
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	62 97       	sbiw	r28, 0x12	; 18
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	9a 8b       	std	Y+18, r25	; 0x12
    24ce:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    24d0:	89 89       	ldd	r24, Y+17	; 0x11
    24d2:	9a 89       	ldd	r25, Y+18	; 0x12
    24d4:	9e 01       	movw	r18, r28
    24d6:	2f 5f       	subi	r18, 0xFF	; 255
    24d8:	3f 4f       	sbci	r19, 0xFF	; 255
    24da:	b9 01       	movw	r22, r18
    24dc:	4a e0       	ldi	r20, 0x0A	; 10
    24de:	50 e0       	ldi	r21, 0x00	; 0
    24e0:	0e 94 01 15 	call	0x2a02	; 0x2a02 <itoa>
   LCD_displayString(buff); /* Display the string */
    24e4:	ce 01       	movw	r24, r28
    24e6:	01 96       	adiw	r24, 0x01	; 1
    24e8:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <LCD_displayString>
}
    24ec:	62 96       	adiw	r28, 0x12	; 18
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	cd bf       	out	0x3d, r28	; 61
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LCD_sendCommand>
}
    250c:	cf 91       	pop	r28
    250e:	df 91       	pop	r29
    2510:	08 95       	ret

00002512 <__vector_9>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    2512:	1f 92       	push	r1
    2514:	0f 92       	push	r0
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	0f 92       	push	r0
    251a:	11 24       	eor	r1, r1
    251c:	2f 93       	push	r18
    251e:	3f 93       	push	r19
    2520:	4f 93       	push	r20
    2522:	5f 93       	push	r21
    2524:	6f 93       	push	r22
    2526:	7f 93       	push	r23
    2528:	8f 93       	push	r24
    252a:	9f 93       	push	r25
    252c:	af 93       	push	r26
    252e:	bf 93       	push	r27
    2530:	ef 93       	push	r30
    2532:	ff 93       	push	r31
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	cd b7       	in	r28, 0x3d	; 61
    253a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    253c:	80 91 98 01 	lds	r24, 0x0198
    2540:	90 91 99 01 	lds	r25, 0x0199
    2544:	00 97       	sbiw	r24, 0x00	; 0
    2546:	29 f0       	breq	.+10     	; 0x2552 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2548:	e0 91 98 01 	lds	r30, 0x0198
    254c:	f0 91 99 01 	lds	r31, 0x0199
    2550:	09 95       	icall
	}
}
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	ff 91       	pop	r31
    2558:	ef 91       	pop	r30
    255a:	bf 91       	pop	r27
    255c:	af 91       	pop	r26
    255e:	9f 91       	pop	r25
    2560:	8f 91       	pop	r24
    2562:	7f 91       	pop	r23
    2564:	6f 91       	pop	r22
    2566:	5f 91       	pop	r21
    2568:	4f 91       	pop	r20
    256a:	3f 91       	pop	r19
    256c:	2f 91       	pop	r18
    256e:	0f 90       	pop	r0
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	0f 90       	pop	r0
    2574:	1f 90       	pop	r1
    2576:	18 95       	reti

00002578 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    2578:	1f 92       	push	r1
    257a:	0f 92       	push	r0
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	0f 92       	push	r0
    2580:	11 24       	eor	r1, r1
    2582:	2f 93       	push	r18
    2584:	3f 93       	push	r19
    2586:	4f 93       	push	r20
    2588:	5f 93       	push	r21
    258a:	6f 93       	push	r22
    258c:	7f 93       	push	r23
    258e:	8f 93       	push	r24
    2590:	9f 93       	push	r25
    2592:	af 93       	push	r26
    2594:	bf 93       	push	r27
    2596:	ef 93       	push	r30
    2598:	ff 93       	push	r31
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    25a2:	80 91 98 01 	lds	r24, 0x0198
    25a6:	90 91 99 01 	lds	r25, 0x0199
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	29 f0       	breq	.+10     	; 0x25b8 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    25ae:	e0 91 98 01 	lds	r30, 0x0198
    25b2:	f0 91 99 01 	lds	r31, 0x0199
    25b6:	09 95       	icall
	}
}
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	ff 91       	pop	r31
    25be:	ef 91       	pop	r30
    25c0:	bf 91       	pop	r27
    25c2:	af 91       	pop	r26
    25c4:	9f 91       	pop	r25
    25c6:	8f 91       	pop	r24
    25c8:	7f 91       	pop	r23
    25ca:	6f 91       	pop	r22
    25cc:	5f 91       	pop	r21
    25ce:	4f 91       	pop	r20
    25d0:	3f 91       	pop	r19
    25d2:	2f 91       	pop	r18
    25d4:	0f 90       	pop	r0
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	0f 90       	pop	r0
    25da:	1f 90       	pop	r1
    25dc:	18 95       	reti

000025de <Timer0_Init>:

void Timer0_Init(const Timer_ConfigType * Config_Ptr)
{
    25de:	df 93       	push	r29
    25e0:	cf 93       	push	r28
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <Timer0_Init+0x6>
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	9a 83       	std	Y+2, r25	; 0x02
    25ea:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = ( Config_Ptr->initial_value);  // Set Initial Value to 0
    25ec:	a2 e5       	ldi	r26, 0x52	; 82
    25ee:	b0 e0       	ldi	r27, 0x00	; 0
    25f0:	e9 81       	ldd	r30, Y+1	; 0x01
    25f2:	fa 81       	ldd	r31, Y+2	; 0x02
    25f4:	82 81       	ldd	r24, Z+2	; 0x02
    25f6:	93 81       	ldd	r25, Z+3	; 0x03
    25f8:	8c 93       	st	X, r24
	TCCR0 = (1<<FOC0) | ((Config_Ptr->clock & 0x07) | (TCCR0 & 0XF8));
    25fa:	a3 e5       	ldi	r26, 0x53	; 83
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e9 81       	ldd	r30, Y+1	; 0x01
    2600:	fa 81       	ldd	r31, Y+2	; 0x02
    2602:	80 81       	ld	r24, Z
    2604:	98 2f       	mov	r25, r24
    2606:	97 70       	andi	r25, 0x07	; 7
    2608:	e3 e5       	ldi	r30, 0x53	; 83
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	88 7f       	andi	r24, 0xF8	; 248
    2610:	89 2b       	or	r24, r25
    2612:	80 68       	ori	r24, 0x80	; 128
    2614:	8c 93       	st	X, r24
	 SREG |=(1<<7); //Enable interrupts
    2616:	af e5       	ldi	r26, 0x5F	; 95
    2618:	b0 e0       	ldi	r27, 0x00	; 0
    261a:	ef e5       	ldi	r30, 0x5F	; 95
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	80 68       	ori	r24, 0x80	; 128
    2622:	8c 93       	st	X, r24
	if ((Config_Ptr->mode) == CTC )
    2624:	e9 81       	ldd	r30, Y+1	; 0x01
    2626:	fa 81       	ldd	r31, Y+2	; 0x02
    2628:	81 81       	ldd	r24, Z+1	; 0x01
    262a:	82 30       	cpi	r24, 0x02	; 2
    262c:	b1 f4       	brne	.+44     	; 0x265a <Timer0_Init+0x7c>
	{
		OCR0 = (Config_Ptr->compare_value); // Set Compare Value
    262e:	ac e5       	ldi	r26, 0x5C	; 92
    2630:	b0 e0       	ldi	r27, 0x00	; 0
    2632:	e9 81       	ldd	r30, Y+1	; 0x01
    2634:	fa 81       	ldd	r31, Y+2	; 0x02
    2636:	84 81       	ldd	r24, Z+4	; 0x04
    2638:	95 81       	ldd	r25, Z+5	; 0x05
    263a:	8c 93       	st	X, r24

		TCCR0 |= (1<<WGM01);
    263c:	a3 e5       	ldi	r26, 0x53	; 83
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	e3 e5       	ldi	r30, 0x53	; 83
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	88 60       	ori	r24, 0x08	; 8
    2648:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
    264a:	a9 e5       	ldi	r26, 0x59	; 89
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	e9 e5       	ldi	r30, 0x59	; 89
    2650:	f0 e0       	ldi	r31, 0x00	; 0
    2652:	80 81       	ld	r24, Z
    2654:	82 60       	ori	r24, 0x02	; 2
    2656:	8c 93       	st	X, r24
    2658:	13 c0       	rjmp	.+38     	; 0x2680 <Timer0_Init+0xa2>

		//DDRB = DDRB | (1<<PB3); // Configure PB3/OC0 Pin as output pin

	}
	else  if ((Config_Ptr->mode) == NORMAL)
    265a:	e9 81       	ldd	r30, Y+1	; 0x01
    265c:	fa 81       	ldd	r31, Y+2	; 0x02
    265e:	81 81       	ldd	r24, Z+1	; 0x01
    2660:	88 23       	and	r24, r24
    2662:	71 f4       	brne	.+28     	; 0x2680 <Timer0_Init+0xa2>
	{
		TCCR0 &= ~(1<<WGM01);
    2664:	a3 e5       	ldi	r26, 0x53	; 83
    2666:	b0 e0       	ldi	r27, 0x00	; 0
    2668:	e3 e5       	ldi	r30, 0x53	; 83
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	80 81       	ld	r24, Z
    266e:	87 7f       	andi	r24, 0xF7	; 247
    2670:	8c 93       	st	X, r24
		TIMSK |= (1<<TOIE0); // Enable Timer0 Overflow Interrupt
    2672:	a9 e5       	ldi	r26, 0x59	; 89
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	e9 e5       	ldi	r30, 0x59	; 89
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	81 60       	ori	r24, 0x01	; 1
    267e:	8c 93       	st	X, r24
	}

}
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <Timer0_setCallBack>:

void Timer0_setCallBack(void(*a_ptr)(void))
{
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	00 d0       	rcall	.+0      	; 0x2690 <Timer0_setCallBack+0x6>
    2690:	cd b7       	in	r28, 0x3d	; 61
    2692:	de b7       	in	r29, 0x3e	; 62
    2694:	9a 83       	std	Y+2, r25	; 0x02
    2696:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	9a 81       	ldd	r25, Y+2	; 0x02
    269c:	90 93 99 01 	sts	0x0199, r25
    26a0:	80 93 98 01 	sts	0x0198, r24
}
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <Timer_DeInit>:


void Timer_DeInit(void)
{
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	cd b7       	in	r28, 0x3d	; 61
    26b4:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer0 Registers */
	TCNT0 = 0;
    26b6:	e2 e5       	ldi	r30, 0x52	; 82
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	10 82       	st	Z, r1
	OCR0=0;
    26bc:	ec e5       	ldi	r30, 0x5C	; 92
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	10 82       	st	Z, r1
	/* Disable Timers interrupt */
	TIMSK &= ~(1<<TOIE0) & ~(1<<OCIE0);
    26c2:	a9 e5       	ldi	r26, 0x59	; 89
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e9 e5       	ldi	r30, 0x59	; 89
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	8c 7f       	andi	r24, 0xFC	; 252
    26ce:	8c 93       	st	X, r24
	SREG &=~(1<<7);
    26d0:	af e5       	ldi	r26, 0x5F	; 95
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	ef e5       	ldi	r30, 0x5F	; 95
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	8f 77       	andi	r24, 0x7F	; 127
    26dc:	8c 93       	st	X, r24

	g_callBackPtr = NULL_PTR; /* clear the call-back function */
    26de:	10 92 99 01 	sts	0x0199, r1
    26e2:	10 92 98 01 	sts	0x0198, r1
}
    26e6:	cf 91       	pop	r28
    26e8:	df 91       	pop	r29
    26ea:	08 95       	ret

000026ec <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    26ec:	df 93       	push	r29
    26ee:	cf 93       	push	r28
    26f0:	00 d0       	rcall	.+0      	; 0x26f2 <UART_init+0x6>
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <UART_init+0x8>
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	9c 83       	std	Y+4, r25	; 0x04
    26fa:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    26fc:	1a 82       	std	Y+2, r1	; 0x02
    26fe:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2700:	eb e2       	ldi	r30, 0x2B	; 43
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	82 e0       	ldi	r24, 0x02	; 2
    2706:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2708:	ea e2       	ldi	r30, 0x2A	; 42
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	88 e1       	ldi	r24, 0x18	; 24
    270e:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2710:	e0 e4       	ldi	r30, 0x40	; 64
    2712:	f0 e0       	ldi	r31, 0x00	; 0
    2714:	80 e8       	ldi	r24, 0x80	; 128
    2716:	80 83       	st	Z, r24
	UCSRC= (((Config_Ptr->Parity)<<4 ) | (UCSRC & 0xCF));
    2718:	a0 e4       	ldi	r26, 0x40	; 64
    271a:	b0 e0       	ldi	r27, 0x00	; 0
    271c:	eb 81       	ldd	r30, Y+3	; 0x03
    271e:	fc 81       	ldd	r31, Y+4	; 0x04
    2720:	85 81       	ldd	r24, Z+5	; 0x05
    2722:	88 2f       	mov	r24, r24
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	82 95       	swap	r24
    2728:	92 95       	swap	r25
    272a:	90 7f       	andi	r25, 0xF0	; 240
    272c:	98 27       	eor	r25, r24
    272e:	80 7f       	andi	r24, 0xF0	; 240
    2730:	98 27       	eor	r25, r24
    2732:	98 2f       	mov	r25, r24
    2734:	e0 e4       	ldi	r30, 0x40	; 64
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	8f 7c       	andi	r24, 0xCF	; 207
    273c:	89 2b       	or	r24, r25
    273e:	8c 93       	st	X, r24
	if(Config_Ptr->Bits_Number == _9_BITS)
    2740:	eb 81       	ldd	r30, Y+3	; 0x03
    2742:	fc 81       	ldd	r31, Y+4	; 0x04
    2744:	84 81       	ldd	r24, Z+4	; 0x04
    2746:	87 30       	cpi	r24, 0x07	; 7
    2748:	39 f4       	brne	.+14     	; 0x2758 <UART_init+0x6c>
	{
		UCSRB |= (1<<UCSZ2);
    274a:	aa e2       	ldi	r26, 0x2A	; 42
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	ea e2       	ldi	r30, 0x2A	; 42
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	84 60       	ori	r24, 0x04	; 4
    2756:	8c 93       	st	X, r24
	}
	UCSRC= ((((Config_Ptr->Bits_Number)<< 1 ) & 0x06) | (UCSRC & 0xF9));
    2758:	a0 e4       	ldi	r26, 0x40	; 64
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	eb 81       	ldd	r30, Y+3	; 0x03
    275e:	fc 81       	ldd	r31, Y+4	; 0x04
    2760:	84 81       	ldd	r24, Z+4	; 0x04
    2762:	88 2f       	mov	r24, r24
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	98 2f       	mov	r25, r24
    276c:	96 70       	andi	r25, 0x06	; 6
    276e:	e0 e4       	ldi	r30, 0x40	; 64
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	80 81       	ld	r24, Z
    2774:	89 7f       	andi	r24, 0xF9	; 249
    2776:	89 2b       	or	r24, r25
    2778:	8c 93       	st	X, r24
	UCSRC= (((Config_Ptr->Stop_Bits_Number)<<3) | (UCSRC & 0XF7 ));
    277a:	a0 e4       	ldi	r26, 0x40	; 64
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	eb 81       	ldd	r30, Y+3	; 0x03
    2780:	fc 81       	ldd	r31, Y+4	; 0x04
    2782:	86 81       	ldd	r24, Z+6	; 0x06
    2784:	88 2f       	mov	r24, r24
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	88 0f       	add	r24, r24
    278a:	99 1f       	adc	r25, r25
    278c:	88 0f       	add	r24, r24
    278e:	99 1f       	adc	r25, r25
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	98 2f       	mov	r25, r24
    2796:	e0 e4       	ldi	r30, 0x40	; 64
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	87 7f       	andi	r24, 0xF7	; 247
    279e:	89 2b       	or	r24, r25
    27a0:	8c 93       	st	X, r24


	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->Baud_Rate * 8UL))) - 1);
    27a2:	eb 81       	ldd	r30, Y+3	; 0x03
    27a4:	fc 81       	ldd	r31, Y+4	; 0x04
    27a6:	80 81       	ld	r24, Z
    27a8:	91 81       	ldd	r25, Z+1	; 0x01
    27aa:	a2 81       	ldd	r26, Z+2	; 0x02
    27ac:	b3 81       	ldd	r27, Z+3	; 0x03
    27ae:	88 0f       	add	r24, r24
    27b0:	99 1f       	adc	r25, r25
    27b2:	aa 1f       	adc	r26, r26
    27b4:	bb 1f       	adc	r27, r27
    27b6:	88 0f       	add	r24, r24
    27b8:	99 1f       	adc	r25, r25
    27ba:	aa 1f       	adc	r26, r26
    27bc:	bb 1f       	adc	r27, r27
    27be:	88 0f       	add	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	aa 1f       	adc	r26, r26
    27c4:	bb 1f       	adc	r27, r27
    27c6:	9c 01       	movw	r18, r24
    27c8:	ad 01       	movw	r20, r26
    27ca:	80 e4       	ldi	r24, 0x40	; 64
    27cc:	92 e4       	ldi	r25, 0x42	; 66
    27ce:	af e0       	ldi	r26, 0x0F	; 15
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	bc 01       	movw	r22, r24
    27d4:	cd 01       	movw	r24, r26
    27d6:	0e 94 96 14 	call	0x292c	; 0x292c <__udivmodsi4>
    27da:	da 01       	movw	r26, r20
    27dc:	c9 01       	movw	r24, r18
    27de:	01 97       	sbiw	r24, 0x01	; 1
    27e0:	9a 83       	std	Y+2, r25	; 0x02
    27e2:	89 83       	std	Y+1, r24	; 0x01


	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    27e4:	e0 e4       	ldi	r30, 0x40	; 64
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	9a 81       	ldd	r25, Y+2	; 0x02
    27ec:	89 2f       	mov	r24, r25
    27ee:	99 27       	eor	r25, r25
    27f0:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    27f2:	e9 e2       	ldi	r30, 0x29	; 41
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	80 83       	st	Z, r24
}
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	cf 91       	pop	r28
    2804:	df 91       	pop	r29
    2806:	08 95       	ret

00002808 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	0f 92       	push	r0
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
    2812:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2814:	eb e2       	ldi	r30, 0x2B	; 43
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	88 2f       	mov	r24, r24
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	80 72       	andi	r24, 0x20	; 32
    2820:	90 70       	andi	r25, 0x00	; 0
    2822:	00 97       	sbiw	r24, 0x00	; 0
    2824:	b9 f3       	breq	.-18     	; 0x2814 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2826:	ec e2       	ldi	r30, 0x2C	; 44
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    282e:	0f 90       	pop	r0
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2836:	df 93       	push	r29
    2838:	cf 93       	push	r28
    283a:	cd b7       	in	r28, 0x3d	; 61
    283c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    283e:	eb e2       	ldi	r30, 0x2B	; 43
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	88 23       	and	r24, r24
    2846:	dc f7       	brge	.-10     	; 0x283e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2848:	ec e2       	ldi	r30, 0x2C	; 44
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
}
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	00 d0       	rcall	.+0      	; 0x285a <UART_sendString+0x6>
    285a:	0f 92       	push	r0
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	9b 83       	std	Y+3, r25	; 0x03
    2862:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2864:	19 82       	std	Y+1, r1	; 0x01
    2866:	0e c0       	rjmp	.+28     	; 0x2884 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	28 2f       	mov	r18, r24
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	8a 81       	ldd	r24, Y+2	; 0x02
    2870:	9b 81       	ldd	r25, Y+3	; 0x03
    2872:	fc 01       	movw	r30, r24
    2874:	e2 0f       	add	r30, r18
    2876:	f3 1f       	adc	r31, r19
    2878:	80 81       	ld	r24, Z
    287a:	0e 94 04 14 	call	0x2808	; 0x2808 <UART_sendByte>
		i++;
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	8f 5f       	subi	r24, 0xFF	; 255
    2882:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	28 2f       	mov	r18, r24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	8a 81       	ldd	r24, Y+2	; 0x02
    288c:	9b 81       	ldd	r25, Y+3	; 0x03
    288e:	fc 01       	movw	r30, r24
    2890:	e2 0f       	add	r30, r18
    2892:	f3 1f       	adc	r31, r19
    2894:	80 81       	ld	r24, Z
    2896:	88 23       	and	r24, r24
    2898:	39 f7       	brne	.-50     	; 0x2868 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	00 d0       	rcall	.+0      	; 0x28b0 <UART_receiveString+0xa>
    28b0:	0f 92       	push	r0
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	9b 83       	std	Y+3, r25	; 0x03
    28b8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28ba:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	28 2f       	mov	r18, r24
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	8a 81       	ldd	r24, Y+2	; 0x02
    28c4:	9b 81       	ldd	r25, Y+3	; 0x03
    28c6:	8c 01       	movw	r16, r24
    28c8:	02 0f       	add	r16, r18
    28ca:	13 1f       	adc	r17, r19
    28cc:	0e 94 1b 14 	call	0x2836	; 0x2836 <UART_recieveByte>
    28d0:	f8 01       	movw	r30, r16
    28d2:	80 83       	st	Z, r24
    28d4:	0f c0       	rjmp	.+30     	; 0x28f4 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    28d6:	89 81       	ldd	r24, Y+1	; 0x01
    28d8:	8f 5f       	subi	r24, 0xFF	; 255
    28da:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	28 2f       	mov	r18, r24
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	8a 81       	ldd	r24, Y+2	; 0x02
    28e4:	9b 81       	ldd	r25, Y+3	; 0x03
    28e6:	8c 01       	movw	r16, r24
    28e8:	02 0f       	add	r16, r18
    28ea:	13 1f       	adc	r17, r19
    28ec:	0e 94 1b 14 	call	0x2836	; 0x2836 <UART_recieveByte>
    28f0:	f8 01       	movw	r30, r16
    28f2:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	28 2f       	mov	r18, r24
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	8a 81       	ldd	r24, Y+2	; 0x02
    28fc:	9b 81       	ldd	r25, Y+3	; 0x03
    28fe:	fc 01       	movw	r30, r24
    2900:	e2 0f       	add	r30, r18
    2902:	f3 1f       	adc	r31, r19
    2904:	80 81       	ld	r24, Z
    2906:	83 32       	cpi	r24, 0x23	; 35
    2908:	31 f7       	brne	.-52     	; 0x28d6 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	28 2f       	mov	r18, r24
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	8a 81       	ldd	r24, Y+2	; 0x02
    2912:	9b 81       	ldd	r25, Y+3	; 0x03
    2914:	fc 01       	movw	r30, r24
    2916:	e2 0f       	add	r30, r18
    2918:	f3 1f       	adc	r31, r19
    291a:	10 82       	st	Z, r1
}
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	1f 91       	pop	r17
    2928:	0f 91       	pop	r16
    292a:	08 95       	ret

0000292c <__udivmodsi4>:
    292c:	a1 e2       	ldi	r26, 0x21	; 33
    292e:	1a 2e       	mov	r1, r26
    2930:	aa 1b       	sub	r26, r26
    2932:	bb 1b       	sub	r27, r27
    2934:	fd 01       	movw	r30, r26
    2936:	0d c0       	rjmp	.+26     	; 0x2952 <__udivmodsi4_ep>

00002938 <__udivmodsi4_loop>:
    2938:	aa 1f       	adc	r26, r26
    293a:	bb 1f       	adc	r27, r27
    293c:	ee 1f       	adc	r30, r30
    293e:	ff 1f       	adc	r31, r31
    2940:	a2 17       	cp	r26, r18
    2942:	b3 07       	cpc	r27, r19
    2944:	e4 07       	cpc	r30, r20
    2946:	f5 07       	cpc	r31, r21
    2948:	20 f0       	brcs	.+8      	; 0x2952 <__udivmodsi4_ep>
    294a:	a2 1b       	sub	r26, r18
    294c:	b3 0b       	sbc	r27, r19
    294e:	e4 0b       	sbc	r30, r20
    2950:	f5 0b       	sbc	r31, r21

00002952 <__udivmodsi4_ep>:
    2952:	66 1f       	adc	r22, r22
    2954:	77 1f       	adc	r23, r23
    2956:	88 1f       	adc	r24, r24
    2958:	99 1f       	adc	r25, r25
    295a:	1a 94       	dec	r1
    295c:	69 f7       	brne	.-38     	; 0x2938 <__udivmodsi4_loop>
    295e:	60 95       	com	r22
    2960:	70 95       	com	r23
    2962:	80 95       	com	r24
    2964:	90 95       	com	r25
    2966:	9b 01       	movw	r18, r22
    2968:	ac 01       	movw	r20, r24
    296a:	bd 01       	movw	r22, r26
    296c:	cf 01       	movw	r24, r30
    296e:	08 95       	ret

00002970 <__prologue_saves__>:
    2970:	2f 92       	push	r2
    2972:	3f 92       	push	r3
    2974:	4f 92       	push	r4
    2976:	5f 92       	push	r5
    2978:	6f 92       	push	r6
    297a:	7f 92       	push	r7
    297c:	8f 92       	push	r8
    297e:	9f 92       	push	r9
    2980:	af 92       	push	r10
    2982:	bf 92       	push	r11
    2984:	cf 92       	push	r12
    2986:	df 92       	push	r13
    2988:	ef 92       	push	r14
    298a:	ff 92       	push	r15
    298c:	0f 93       	push	r16
    298e:	1f 93       	push	r17
    2990:	cf 93       	push	r28
    2992:	df 93       	push	r29
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	ca 1b       	sub	r28, r26
    299a:	db 0b       	sbc	r29, r27
    299c:	0f b6       	in	r0, 0x3f	; 63
    299e:	f8 94       	cli
    29a0:	de bf       	out	0x3e, r29	; 62
    29a2:	0f be       	out	0x3f, r0	; 63
    29a4:	cd bf       	out	0x3d, r28	; 61
    29a6:	09 94       	ijmp

000029a8 <__epilogue_restores__>:
    29a8:	2a 88       	ldd	r2, Y+18	; 0x12
    29aa:	39 88       	ldd	r3, Y+17	; 0x11
    29ac:	48 88       	ldd	r4, Y+16	; 0x10
    29ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    29b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    29b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    29b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    29b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    29b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    29ba:	b9 84       	ldd	r11, Y+9	; 0x09
    29bc:	c8 84       	ldd	r12, Y+8	; 0x08
    29be:	df 80       	ldd	r13, Y+7	; 0x07
    29c0:	ee 80       	ldd	r14, Y+6	; 0x06
    29c2:	fd 80       	ldd	r15, Y+5	; 0x05
    29c4:	0c 81       	ldd	r16, Y+4	; 0x04
    29c6:	1b 81       	ldd	r17, Y+3	; 0x03
    29c8:	aa 81       	ldd	r26, Y+2	; 0x02
    29ca:	b9 81       	ldd	r27, Y+1	; 0x01
    29cc:	ce 0f       	add	r28, r30
    29ce:	d1 1d       	adc	r29, r1
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	ed 01       	movw	r28, r26
    29dc:	08 95       	ret

000029de <memcpy>:
    29de:	fb 01       	movw	r30, r22
    29e0:	dc 01       	movw	r26, r24
    29e2:	02 c0       	rjmp	.+4      	; 0x29e8 <memcpy+0xa>
    29e4:	01 90       	ld	r0, Z+
    29e6:	0d 92       	st	X+, r0
    29e8:	41 50       	subi	r20, 0x01	; 1
    29ea:	50 40       	sbci	r21, 0x00	; 0
    29ec:	d8 f7       	brcc	.-10     	; 0x29e4 <memcpy+0x6>
    29ee:	08 95       	ret

000029f0 <strcmp>:
    29f0:	fb 01       	movw	r30, r22
    29f2:	dc 01       	movw	r26, r24
    29f4:	8d 91       	ld	r24, X+
    29f6:	01 90       	ld	r0, Z+
    29f8:	80 19       	sub	r24, r0
    29fa:	01 10       	cpse	r0, r1
    29fc:	d9 f3       	breq	.-10     	; 0x29f4 <strcmp+0x4>
    29fe:	99 0b       	sbc	r25, r25
    2a00:	08 95       	ret

00002a02 <itoa>:
    2a02:	fb 01       	movw	r30, r22
    2a04:	9f 01       	movw	r18, r30
    2a06:	e8 94       	clt
    2a08:	42 30       	cpi	r20, 0x02	; 2
    2a0a:	c4 f0       	brlt	.+48     	; 0x2a3c <itoa+0x3a>
    2a0c:	45 32       	cpi	r20, 0x25	; 37
    2a0e:	b4 f4       	brge	.+44     	; 0x2a3c <itoa+0x3a>
    2a10:	4a 30       	cpi	r20, 0x0A	; 10
    2a12:	29 f4       	brne	.+10     	; 0x2a1e <itoa+0x1c>
    2a14:	97 fb       	bst	r25, 7
    2a16:	1e f4       	brtc	.+6      	; 0x2a1e <itoa+0x1c>
    2a18:	90 95       	com	r25
    2a1a:	81 95       	neg	r24
    2a1c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a1e:	64 2f       	mov	r22, r20
    2a20:	77 27       	eor	r23, r23
    2a22:	0e 94 32 15 	call	0x2a64	; 0x2a64 <__udivmodhi4>
    2a26:	80 5d       	subi	r24, 0xD0	; 208
    2a28:	8a 33       	cpi	r24, 0x3A	; 58
    2a2a:	0c f0       	brlt	.+2      	; 0x2a2e <itoa+0x2c>
    2a2c:	89 5d       	subi	r24, 0xD9	; 217
    2a2e:	81 93       	st	Z+, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	00 97       	sbiw	r24, 0x00	; 0
    2a34:	a1 f7       	brne	.-24     	; 0x2a1e <itoa+0x1c>
    2a36:	16 f4       	brtc	.+4      	; 0x2a3c <itoa+0x3a>
    2a38:	5d e2       	ldi	r21, 0x2D	; 45
    2a3a:	51 93       	st	Z+, r21
    2a3c:	10 82       	st	Z, r1
    2a3e:	c9 01       	movw	r24, r18
    2a40:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <strrev>

00002a44 <strrev>:
    2a44:	dc 01       	movw	r26, r24
    2a46:	fc 01       	movw	r30, r24
    2a48:	67 2f       	mov	r22, r23
    2a4a:	71 91       	ld	r23, Z+
    2a4c:	77 23       	and	r23, r23
    2a4e:	e1 f7       	brne	.-8      	; 0x2a48 <strrev+0x4>
    2a50:	32 97       	sbiw	r30, 0x02	; 2
    2a52:	04 c0       	rjmp	.+8      	; 0x2a5c <strrev+0x18>
    2a54:	7c 91       	ld	r23, X
    2a56:	6d 93       	st	X+, r22
    2a58:	70 83       	st	Z, r23
    2a5a:	62 91       	ld	r22, -Z
    2a5c:	ae 17       	cp	r26, r30
    2a5e:	bf 07       	cpc	r27, r31
    2a60:	c8 f3       	brcs	.-14     	; 0x2a54 <strrev+0x10>
    2a62:	08 95       	ret

00002a64 <__udivmodhi4>:
    2a64:	aa 1b       	sub	r26, r26
    2a66:	bb 1b       	sub	r27, r27
    2a68:	51 e1       	ldi	r21, 0x11	; 17
    2a6a:	07 c0       	rjmp	.+14     	; 0x2a7a <__udivmodhi4_ep>

00002a6c <__udivmodhi4_loop>:
    2a6c:	aa 1f       	adc	r26, r26
    2a6e:	bb 1f       	adc	r27, r27
    2a70:	a6 17       	cp	r26, r22
    2a72:	b7 07       	cpc	r27, r23
    2a74:	10 f0       	brcs	.+4      	; 0x2a7a <__udivmodhi4_ep>
    2a76:	a6 1b       	sub	r26, r22
    2a78:	b7 0b       	sbc	r27, r23

00002a7a <__udivmodhi4_ep>:
    2a7a:	88 1f       	adc	r24, r24
    2a7c:	99 1f       	adc	r25, r25
    2a7e:	5a 95       	dec	r21
    2a80:	a9 f7       	brne	.-22     	; 0x2a6c <__udivmodhi4_loop>
    2a82:	80 95       	com	r24
    2a84:	90 95       	com	r25
    2a86:	bc 01       	movw	r22, r24
    2a88:	cd 01       	movw	r24, r26
    2a8a:	08 95       	ret

00002a8c <_exit>:
    2a8c:	f8 94       	cli

00002a8e <__stop_program>:
    2a8e:	ff cf       	rjmp	.-2      	; 0x2a8e <__stop_program>
